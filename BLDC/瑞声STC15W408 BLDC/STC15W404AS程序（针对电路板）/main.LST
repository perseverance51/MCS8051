C51 COMPILER V9.60.0.0   MAIN                                                              04/27/2022 22:43:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /******************************************/
   2          //
   3          // 该程序工作的主频是35MHz
   4          // STC15W408AS
   5          // 作者：瑞生 
   6          // 博客：http://www.rationmcu.com
   7          //
   8          /******************************************/
   9          
  10          #include <reg51.h>
  11          #include <intrins.h>
  12          #define uchar unsigned char
  13          #define uint  unsigned int
  14          
  15          
  16          
  17          /* STC15W408AS寄存器补充 */
  18          sfr AUXR1 = 0XA2;
  19          sfr CCON = 0XD8;
  20          sfr CMOD = 0XD9;
  21          sfr CCAPM0 = 0XDA;
  22          sfr CCAPM1 = 0XDB;
  23          sfr CCAPM2 = 0XDC;
  24          
  25          sfr CL     = 0xE9;
  26          sfr CCAP0L = 0xEA;
  27          sfr CCAP1L = 0xEB;
  28          sfr CCAP2L = 0xEC;
  29          sfr CH     = 0xF9;
  30          sfr CCAP0H = 0xFA;
  31          sfr CCAP1H = 0xFB;
  32          sfr CCAP2H = 0xFC;
  33          
  34          sbit CF    = CCON^7;
  35          sbit CR    = CCON^6;
  36          sbit CCF2  = CCON^2;
  37          sbit CCF1  = CCON^1;
  38          sbit CCF0  = CCON^0;
  39          
  40          sbit PPCA = IP^7;
  41          
  42          sfr P2M1 = 0X95;
  43          sfr P2M0 = 0X96;
  44          
  45          sfr CMPCR1 = 0XE6;
  46          sfr CMPCR2 = 0XE7;
  47          
  48          sfr AUXR = 0X8E;
  49          sfr TH2 = 0XD6;
  50          sfr TL2 = 0XD7;
  51          sfr P4 = 0xc0;
  52          sfr P5 = 0xc8;
  53          
  54          sfr PCA_PWM0 = 0XF2;
  55          sfr PCA_PWM1 = 0XF3;
C51 COMPILER V9.60.0.0   MAIN                                                              04/27/2022 22:43:55 PAGE 2   

  56          sfr PCA_PWM2 = 0XF4;
  57          
  58          sfr P1ASF = 0X9D;
  59          sfr ADC_CONTR = 0XBC;
  60          sfr PCON2 = 0X97;
  61          
  62          sfr SPSTAT      =   0xCD;   //
  63          sfr SPCTL       =   0xCE;   //
  64          sfr SPDAT       =   0xCF;   //
  65          //按键控制 启动 加速 减速 停转
  66          sbit ADD = P1^2;
  67          sbit DEL = P5^5;
  68          
  69          sbit PWM2_L = P3^2;
  70          sbit PWM1_L = P3^3;
  71          sbit PWM0_L = P3^6;
  72          
  73          
  74          #define DISABLE_CMP_INT CMPCR1&=0X7F // 关闭比较器
  75          #define ENABLE_CMP_INT CMPCR1|=0X80 // 打开比较器
  76          
  77          /*************************/
  78          
  79          unsigned char Step=0; // 换相步骤
  80          unsigned char PWM_Value=0; // 决定PWM占空比的值
  81          unsigned char QD_Sign=0; // 0 没有启动 1启动
  82          
  83          void Delay1ms()   //@35MHz
  84          {
  85   1        unsigned char i, j;
  86   1      
  87   1        i = 35;
  88   1        j = 8;
  89   1        do
  90   1        {
  91   2          while (--j);
  92   2        } while (--i);
  93   1      }
  94          
  95          void delay_ms(unsigned int ms)
  96          {
  97   1        while(ms)
  98   1        {
  99   2          Delay1ms();
 100   2          ms=ms-1;
 101   2        }
 102   1      }
 103          
 104          void Delay1us()   //@35MHz
 105          {
 106   1        unsigned char i;
 107   1      
 108   1        _nop_();
 109   1        i = 6;
 110   1        while (--i);
 111   1      }
 112          
 113          void delay_us(unsigned int us)
 114          {
 115   1        while(us)
 116   1        {
 117   2          Delay1us();
C51 COMPILER V9.60.0.0   MAIN                                                              04/27/2022 22:43:55 PAGE 3   

 118   2          us=us-1;
 119   2        }
 120   1      }
 121          // 换相序列函数
 122          void StepXL(void) 
 123          {
 124   1       switch(Step)
 125   1        {
 126   2         case 0:  // AB
 127   2            CCAP0H=PWM_Value;CCAP1H=0;CCAP2H=0; // 打开A相的高端
 128   2            PWM0_L=0;PWM2_L=0;PWM1_L=1; // 打开B相的低端
 129   2            ADC_CONTR = 0XED; // 选择P1.5作为ADC输入 即c相电压
 130   2            CMPCR1&=0xDF; // PIE=0，关闭上升沿中断
 131   2            CMPCR1|=0x10; // NIE=1，使能下降沿中断
 132   2            break;
 133   2         case 1:  // AC
 134   2            CCAP0H=PWM_Value;CCAP1H=0;CCAP2H=0; // 打开A相的高端
 135   2            PWM0_L=0;PWM1_L=0;PWM2_L=1; // 打开C相的低端
 136   2            ADC_CONTR = 0XEC; // 选择P1.4作为ADC输入 即B相电压
 137   2            CMPCR1&=0xEF; // NIE=0 ,关闭下降沿中断
 138   2            CMPCR1|=0x20; // PIE=1，使能上升沿中断
 139   2         
 140   2            break;
 141   2         case 2:  // BC
 142   2            CCAP0H=0;CCAP2H=0;CCAP1H=PWM_Value; // 打开B相的高端
 143   2            PWM0_L=0;PWM1_L=0;PWM2_L=1; // 打开C相的低端
 144   2            ADC_CONTR = 0XEB; // 选择P1.3作为ADC输入 即a相电压
 145   2            CMPCR1&=0xDF; // PIE=0，关闭上升沿中断
 146   2            CMPCR1|=0x10; // NIE=1，使能下降沿中断
 147   2            break;
 148   2         case 3:  // BA
 149   2            CCAP0H=0;CCAP2H=0;CCAP1H=PWM_Value; // 打开B相的高端
 150   2            PWM1_L=0;PWM2_L=0;PWM0_L=1; // 打开A相的低端
 151   2            ADC_CONTR = 0XED; // 选择P1.5作为ADC输入 即c相电压
 152   2            CMPCR1&=0xEF; // NIE=0 ,关闭下降沿中断
 153   2            CMPCR1|=0x20; // PIE=1，使能上升沿中断
 154   2            
 155   2            break;
 156   2         case 4: // CA
 157   2            CCAP0H=0;CCAP1H=0;CCAP2H=PWM_Value; // 打开C相的高端
 158   2            PWM1_L=0;PWM2_L=0;PWM0_L=1; // 打开A相的低端
 159   2            ADC_CONTR = 0XEC; // 选择P1.4作为ADC输入 即B相电压
 160   2            CMPCR1&=0xDF; // PIE=0，关闭上升沿中断
 161   2            CMPCR1|=0x10; // NIE=1，使能下降沿中断
 162   2            break;
 163   2         case 5: // CB
 164   2            CCAP0H=0;CCAP1H=0;CCAP2H=PWM_Value;// 打开C相的高端
 165   2            PWM0_L=0;PWM2_L=0;PWM1_L=1; // 打开B相的低端
 166   2            ADC_CONTR = 0XEB; // 选择P1.3作为ADC输入 即a相电压
 167   2            CMPCR1&=0xEF; // NIE=0 ,关闭下降沿中断
 168   2            CMPCR1|=0x20; // PIE=1，使能上升沿中断
 169   2         
 170   2            break;
 171   2         default:break;
 172   2        } 
 173   1      }
 174          
 175          
 176          /*****************串口配置函数**********************/
 177          void serial_open(void)
 178          {
 179   1        SCON = 0X50;//工作在串口模式
C51 COMPILER V9.60.0.0   MAIN                                                              04/27/2022 22:43:55 PAGE 4   

 180   1        AUXR |= 0X04;//
 181   1        TL2 = 0X71;// 9600 @35MHz
 182   1        TH2 = 0Xfc;
 183   1        AUXR|=0X10;// 
 184   1      }
 185          
 186          /******************串口发送数据函数********************/
 187           void senddata(uchar data_buf)
 188           {
 189   1        SBUF = data_buf;
 190   1        while(!TI);
 191   1        TI = 0;
 192   1       }
 193          
 194          // PWM初始化函数
 195          void PWM_Init(void)
 196          {
 197   1        PWM0_L=0;
 198   1        PWM1_L=0;
 199   1        PWM2_L=0;
 200   1      
 201   1        CMOD=0X0C; //选择系统时钟/6为时钟源，即频率=35M/6/256=22.8K
 202   1        CL=0;     // PCA计数器清零
 203   1        CH=0;
 204   1        
 205   1        PCA_PWM0 = 0X00;
 206   1        CCAP0H=0;    // 初始化占空比为0% H的值装载到L中
 207   1        CCAP0L=0;
 208   1        CCAPM0=0x42;  // 设置为PWM模式
 209   1        
 210   1        PCA_PWM1 = 0X00;
 211   1        CCAP1H=0;    // 初始化占空比为0%
 212   1        CCAP1L=0;
 213   1        CCAPM1=0x42;  // 设置为PWM模式
 214   1        
 215   1        PCA_PWM2 = 0X00;
 216   1        CCAP2H=0;    // 初始化占空比为0%
 217   1        CCAP2L=0;
 218   1        CCAPM2=0x42;  // 设置为PWM模式
 219   1        
 220   1        CR = 1;
 221   1      }
 222          // ADC初始化函数
 223          void ADC_Init(void)
 224          {
 225   1        P1ASF = 0X38; // 开通P1.3 P1.4 P1.5的AD输入口
 226   1        ADC_CONTR=0XE0; // 打开ADC电源 设置最大转换速度
 227   1        IE|=0X20; // EADC=1 允许ADC中断
 228   1      }
 229          
 230          void ADC_ISR() interrupt 5
 231          {
 232   1        ADC_CONTR&=0xEF; // 清ADC转换标志
 233   1        ADC_CONTR|=0X08; // 启动ADC转换
 234   1      }
 235          
 236          // 比较器启动函数
 237          void CMP_Init(void)
 238          {
 239   1        CMPCR1=0X0c; // P5.4作为比较器的反相输入端，ADC引脚作为正输入端 
 240   1        CMPCR2=0x10;// 个时钟滤波
 241   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              04/27/2022 22:43:55 PAGE 5   

 242          // 比较器中断函数
 243          void CMP_ISR(void) interrupt 21
 244          {
 245   1        CMPCR1 &=0XBF; // 需软件清除中断标志位
 246   1        TH0=0x00; // 给定时器初值
 247   1        TL0=0X00;
 248   1        if(Step<5)Step++;
 249   1        else Step=0;
 250   1        StepXL();
 251   1      }
 252          
 253          // 电机启动函数
 254          unsigned char QiDong(void)
 255          {
 256   1        unsigned int timer = 300,i;
 257   1        DISABLE_CMP_INT;
 258   1        PWM_Value = 20; // 占空比=20/256=7.8%
 259   1        Step=0;
 260   1        StepXL();
 261   1        delay_ms(5);
 262   1      
 263   1        while(1)
 264   1        {
 265   2          for(i=0;i<timer; i++) 
 266   2          {
 267   3            delay_us(50);  //
 268   3          } 
 269   2          timer-= timer/15+1;
 270   2          if(timer < 25) 
 271   2          {
 272   3            QD_Sign=1; // 标志已经启动
 273   3            return(1);
 274   3          }
 275   2          if(Step<5)Step++;
 276   2          else Step=0;
 277   2          StepXL();
 278   2        }
 279   1      }
 280          // 定时器0初始化函数
 281          void T0_Iint(void)
 282          {
 283   1        TMOD=0X01; // T0工作于16位计数模式
 284   1        TH0=0x00; //
 285   1        TL0=0X00;
 286   1        ET0=1;// 允许ET0中断
 287   1      }
 288          
 289          // 定时器0中断函数(如果进入定时器0中断，代表电机停转，用于保护)
 290          void T0_ISR(void) interrupt 1
 291          {
 292   1        PWM0_L=0;PWM1_L=0;PWM2_L=0;
 293   1        CCAP0H=0;CCAP1H=0;CCAP2H=0;  // 占空比为0
 294   1        TR0=0;
 295   1        EA=0;
 296   1        DISABLE_CMP_INT;
 297   1        TH0=0x00; //
 298   1        TL0=0X00;
 299   1        QD_Sign=0; // 标志没有启动
 300   1        
 301   1        QiDong(); // 再次启动
 302   1        ENABLE_CMP_INT; // 打开比较器中断
 303   1        EA=1; // 打开总中断
C51 COMPILER V9.60.0.0   MAIN                                                              04/27/2022 22:43:55 PAGE 6   

 304   1        TR0=1; // 打开定时器0
 305   1      }
 306          
 307          /**********************************************/
 308          void main(void)
 309          {
 310   1        uchar rec=0; // 串口接收数据
 311   1      //  uchar i;
 312   1      
 313   1        PWM_Init(); // 初始化PWM
 314   1        ADC_Init(); // 初始化ADC
 315   1        CMP_Init(); // 初始化比较器
 316   1        serial_open(); // 打开串口
 317   1        T0_Iint(); // 定时器0初始化(如果进入定时器0中断，代表电机停转，用于保护)
 318   1        
 319   1        while (1)
 320   1        {
 321   2          // 如果串口收到数据(这部分是串口控制 启动 加速 减速 停转)
 322   2          if(RI) 
 323   2          {
 324   3            rec=SBUF; // 把接收到的数据给了rec
 325   3            RI=0; // 清串口接收标志
 326   3            
 327   3            if(rec==0x22) // 加速
 328   3            {
 329   4              if(PWM_Value<250)
 330   4              {
 331   5                PWM_Value++; // 增加占空比
 332   5              }
 333   4            }
 334   3            else if(rec==0x33) // 减速
 335   3            {
 336   4              if(PWM_Value>10)
 337   4              {
 338   5                PWM_Value--; // 减小占空比
 339   5              }
 340   4            }
 341   3            else if(rec==0x11) // 电机启动
 342   3            {
 343   4              QiDong(); // 启动
 344   4              ENABLE_CMP_INT; // 打开比较器中断
 345   4              EA=1; // 打开总中断
 346   4              TR0=1; // 打开定时器0
 347   4            }
 348   3            else if(rec==0x44) // 停转
 349   3            {
 350   4              CCAP0H=0;CCAP1H=0;CCAP2H=0;  // 占空比为0
 351   4              PWM0_L=0;PWM1_L=0;PWM2_L=0;
 352   4              EA=0; // 关总中断
 353   4              DISABLE_CMP_INT; // 关比较器中断
 354   4            }
 355   3            senddata(SBUF);
 356   3          }
 357   2          // 此部分是按键控制 启动 加速 减速 停转
 358   2          if(ADD==0) // 按下了增加加速按键
 359   2          {
 360   3            delay_ms(20);
 361   3            if(ADD==0)
 362   3            {
 363   4              if(QD_Sign==0)// 如果没有启动
 364   4              {
 365   5                QiDong(); // 启动
C51 COMPILER V9.60.0.0   MAIN                                                              04/27/2022 22:43:55 PAGE 7   

 366   5                ENABLE_CMP_INT; // 打开比较器中断
 367   5                EA=1; // 打开总中断
 368   5                TR0=1; // 打开定时器0
 369   5              }
 370   4              else if(PWM_Value<250)
 371   4              {
 372   5                PWM_Value++; // 增加占空比
 373   5              }
 374   4            }
 375   3          }
 376   2          else if(DEL==0) // 按下了减速按键
 377   2          {
 378   3            delay_ms(20);
 379   3            if(DEL==0)
 380   3            {
 381   4              if(PWM_Value>10) 
 382   4              {
 383   5                PWM_Value--; // 减小占空比
 384   5              }
 385   4              else // 停转
 386   4              {
 387   5                CCAP0H=0;CCAP1H=0;CCAP2H=0;  // 占空比为0
 388   5                PWM0_L=0;PWM1_L=0;PWM2_L=0;
 389   5                TR0=0;
 390   5                EA=0;
 391   5                DISABLE_CMP_INT;
 392   5                TH0=0x00; //
 393   5                TL0=0X00;
 394   5                QD_Sign=0; // 标志没有启动
 395   5              }
 396   4            }
 397   3          }
 398   2        }
 399   1      }
 400          
 401          
 402          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    765    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
