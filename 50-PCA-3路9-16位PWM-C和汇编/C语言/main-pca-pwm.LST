C51 COMPILER V9.60.0.0   MAIN_PCA_PWM                                                      02/07/2022 14:59:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN_PCA_PWM
OBJECT MODULE PLACED IN main-pca-pwm.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main-pca-pwm.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          
   2          /*---------------------------------------------------------------------*/
   3          /* --- STC MCU Limited ------------------------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-755-82905966 -------------------------------------------*/
   6          /* --- Tel: 86-755-82948412 -------------------------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* 如果要在文章中应用此代码,请在文章中注明使用了宏晶科技的资料及程序   */
   9          /*---------------------------------------------------------------------*/
  10          
  11          
  12          #include  <reg52.h>
  13          
  14          
  15          /*************  功能说明  **************
  16          
  17          输出3路9~16位PWM信号。
  18          
  19          PWM频率 = MAIN_Fosc / PWM_DUTY, 假设 MAIN_Fosc = 24MHZ, PWM_DUTY = 8000, 则输出PWM频率为2000HZ.
  20          
  21          ******************************************/
  22          
  23          /***************************用户宏定义*******************************************************/
  24          #define   MAIN_Fosc   16000000UL  //定义主时钟
  25          
  26          #define   PWM_DUTY    8000    //定义PWM的周期，数值为PCA所选择的时钟脉冲个数。
  27          #define   PWM_HIGH_MIN  80      //限制PWM输出的最小占空比, 避免中断里重装参数时间不够。
  28          #define   PWM_HIGH_MAX  (PWM_DUTY - PWM_HIGH_MIN)   //限制PWM输出的最大占空比。
  29          
  30          /********************************************************************************************/
  31          
  32          #define PCA0      0
  33          #define PCA1      1
  34          #define PCA2      2
  35          #define PCA_Counter   3
  36          #define PCA_P12_P11_P10_P37 (0<<4)
  37          #define PCA_P34_P35_P36_P37 (1<<4)
  38          #define PCA_P24_P25_P26_P27 (2<<4)
  39          #define PCA_Mode_PWM        0x42  //使能PCA模块0_PWM输出
  40          #define PCA_Mode_Capture      0
  41          #define PCA_Mode_SoftTimer      0x48
  42          #define PCA_Mode_HighPulseOutput  0x4c
  43          #define PCA_Clock_1T  (4<<1)  //PCA时钟源为系统时钟
  44          #define PCA_Clock_2T  (1<<1)
  45          #define PCA_Clock_4T  (5<<1)
  46          #define PCA_Clock_6T  (6<<1)
  47          #define PCA_Clock_8T  (7<<1)
  48          #define PCA_Clock_12T (0<<1)
  49          #define PCA_Clock_Timer0_OF (2<<1)
  50          #define PCA_Clock_ECI (3<<1)
  51          #define PCA_Rise_Active (1<<5)
  52          #define PCA_Fall_Active (1<<4)
  53          #define PCA_PWM_8bit  (0<<6)
  54          #define PCA_PWM_7bit  (1<<6)
  55          #define PCA_PWM_6bit  (2<<6)
C51 COMPILER V9.60.0.0   MAIN_PCA_PWM                                                      02/07/2022 14:59:18 PAGE 2   

  56          
  57          #define   ENABLE    1
  58          #define   DISABLE   0
  59          
  60          typedef   unsigned char u8;
  61          typedef   unsigned int  u16;
  62          typedef   unsigned long u32;
  63          
  64          sfr AUXR1 = 0xA2;
  65          sfr CCON = 0xD8;
  66          sfr CMOD = 0xD9;
  67          sfr CCAPM0 = 0xDA;    //PCA模块0的工作模式寄存器。
  68          sfr CCAPM1 = 0xDB;    //PCA模块1的工作模式寄存器。
  69          sfr CCAPM2 = 0xDC;    //PCA模块2的工作模式寄存器。
  70          
  71          sfr CL     = 0xE9;
  72          sfr CCAP0L = 0xEA;    //PCA模块0的捕捉/比较寄存器低8位。
  73          sfr CCAP1L = 0xEB;    //PCA模块1的捕捉/比较寄存器低8位。
  74          sfr CCAP2L = 0xEC;    //PCA模块2的捕捉/比较寄存器低8位。
  75          
  76          sfr CH     = 0xF9;
  77          sfr CCAP0H = 0xFA;    //PCA模块0的捕捉/比较寄存器高8位。
  78          sfr CCAP1H = 0xFB;    //PCA模块1的捕捉/比较寄存器高8位。
  79          sfr CCAP2H = 0xFC;    //PCA模块2的捕捉/比较寄存器高8位。
  80          
  81          sbit CCF0  = CCON^0;  //PCA 模块0中断标志，由硬件置位，必须由软件清0。
  82          sbit CCF1  = CCON^1;  //PCA 模块1中断标志，由硬件置位，必须由软件清0。
  83          sbit CCF2  = CCON^2;  //PCA 模块2中断标志，由硬件置位，必须由软件清0。
  84          sbit CR    = CCON^6;  //1: 允许PCA计数器计数，0: 禁止计数。
  85          sbit CF    = CCON^7;  //PCA计数器溢出（CH，CL由FFFFH变为0000H）标志。
  86                                  //PCA计数器溢出后由硬件置位，必须由软件清0。
  87          sbit PPCA  = IP^7;    //PCA 中断 优先级设定位
  88          
  89          sfr P1M1 = 0x91;  //P1M1.n,P1M0.n   =00--->Standard,  01--->push-pull   实际上1T的都一样
  90          sfr P1M0 = 0x92;  //          =10--->pure input,  11--->open drain
  91          sfr P0M1 = 0x93;  //P0M1.n,P0M0.n   =00--->Standard,  01--->push-pull
  92          sfr P0M0 = 0x94;  //          =10--->pure input,  11--->open drain
  93          sfr P2M1 = 0x95;  //P2M1.n,P2M0.n   =00--->Standard,  01--->push-pull
  94          sfr P2M0 = 0x96;  //          =10--->pure input,  11--->open drain
  95          sfr P3M1  = 0xB1; //P3M1.n,P3M0.n   =00--->Standard,  01--->push-pull
  96          sfr P3M0  = 0xB2; //          =10--->pure input,  11--->open drain
  97          sfr P4M1  = 0xB3; //P4M1.n,P4M0.n   =00--->Standard,  01--->push-pull
  98          sfr P4M0  = 0xB4; //          =10--->pure input,  11--->open drain
  99          sfr P5M1   = 0xC9;  //  P5M1.n,P5M0.n   =00--->Standard,  01--->push-pull
 100          sfr P5M0   = 0xCA;  //          =10--->pure input,  11--->open drain
 101          sfr P6M1   = 0xCB;  //  P5M1.n,P5M0.n   =00--->Standard,  01--->push-pull
 102          sfr P6M0   = 0xCC;  //          =10--->pure input,  11--->open drain
 103          sfr P7M1   = 0xE1;
 104          sfr P7M0   = 0xE2;
 105          
 106          //================================================================
 107          
 108          sbit  P25 = P2^5;
 109          sbit  P26 = P2^6;
 110          sbit  P27 = P2^7;
 111          
 112          u16   CCAP0_tmp,PWM0_high,PWM0_low;
 113          u16   CCAP1_tmp,PWM1_high,PWM1_low;
 114          u16   CCAP2_tmp,PWM2_high,PWM2_low;
 115          
 116          u16 pwm0,pwm1,pwm2;
 117          
C51 COMPILER V9.60.0.0   MAIN_PCA_PWM                                                      02/07/2022 14:59:18 PAGE 3   

 118          void  PWMn_Update(u8 PCA_id, u16 pwm);
 119          void  PCA_Init(void);
 120          void  delay_ms(u8 ms);
 121          
 122          /******************** 主函数 **************************/
 123          void main(void)
 124          {
 125   1        P0M1 = 0; P0M0 = 0; //设置为准双向口
 126   1        P1M1 = 0; P1M0 = 0; //设置为准双向口
 127   1        P2M1 = 0; P2M0 = 0; //设置为准双向口
 128   1        P3M1 = 0; P3M0 = 0; //设置为准双向口
 129   1        P4M1 = 0; P4M0 = 0; //设置为准双向口
 130   1        P5M1 = 0; P5M0 = 0; //设置为准双向口
 131   1        P6M1 = 0; P6M0 = 0; //设置为准双向口
 132   1        P7M1 = 0; P7M0 = 0; //设置为准双向口
 133   1        
 134   1        PCA_Init(); //PCA初始化
 135   1        EA = 1;
 136   1        P2M1 &= ~(0xe0);  //P2.7 P2.6 P2.5 设置为推挽输出
 137   1        P2M0 |=  (0xe0);
 138   1        
 139   1        while (1)
 140   1        {
 141   2          delay_ms(2);
 142   2      
 143   2          if(++pwm0 >= PWM_HIGH_MAX)  pwm0 = PWM_HIGH_MIN;
 144   2          PWMn_Update(PCA0,pwm0);
 145   2      
 146   2          if(++pwm1 >= PWM_HIGH_MAX)  pwm1 = PWM_HIGH_MIN;
 147   2          PWMn_Update(PCA1,pwm1);
 148   2      
 149   2          if(++pwm2 >= PWM_HIGH_MAX)  pwm2 = PWM_HIGH_MIN;
 150   2          PWMn_Update(PCA2,pwm2);
 151   2        }
 152   1      }
 153          
 154          
 155          //========================================================================
 156          // 函数: void  delay_ms(u8 ms)
 157          // 描述: 延时函数。
 158          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 159          // 返回: none.
 160          // 版本: VER1.0
 161          // 日期: 2013-4-1
 162          // 备注: 
 163          //========================================================================
 164          void  delay_ms(u8 ms)
 165          {
 166   1           unsigned int i;
 167   1         do{
 168   2              i = MAIN_Fosc / 13000;
 169   2            while(--i)  ;
 170   2           }while(--ms);
 171   1      }
 172          
 173          
 174          //========================================================================
 175          // 函数: void PWMn_SetHighReg(unsigned int high)
 176          // 描述: 更新占空比数据。
 177          // 参数: high:  占空比数据，即PWM输出高电平的PCA时钟脉冲个数。
 178          // 返回: 无
 179          // 版本: VER1.0
C51 COMPILER V9.60.0.0   MAIN_PCA_PWM                                                      02/07/2022 14:59:18 PAGE 4   

 180          // 日期: 2013-5-15
 181          // 备注: 
 182          //========================================================================
 183          void PWMn_Update(u8 PCA_id, u16 pwm)
 184          {
 185   1        if(pwm > PWM_HIGH_MAX)  pwm = PWM_HIGH_MAX; //如果写入大于最大占空比数据，强制为最大占空比。
 186   1        if(pwm < PWM_HIGH_MIN)  pwm = PWM_HIGH_MIN; //如果写入小于最小占空比数据，强制为最小占空比。
 187   1      
 188   1        if(PCA_id == PCA0)
 189   1        {
 190   2          CR = 0;           //停止PCA一会， 一般不会影响PWM。
 191   2          PWM0_high = pwm;      //数据在正确范围，则装入占空比寄存器。
 192   2          PWM0_low = PWM_DUTY - pwm;  //计算并保存PWM输出低电平的PCA时钟脉冲个数。
 193   2          CR = 1;           //启动PCA。
 194   2        }
 195   1        else if(PCA_id == PCA1)
 196   1        {
 197   2          CR = 0;           //停止PCA。
 198   2          PWM1_high = pwm;      //数据在正确范围，则装入占空比寄存器。
 199   2          PWM1_low = PWM_DUTY - pwm;  //计算并保存PWM输出低电平的PCA时钟脉冲个数。
 200   2          CR = 1;           //启动PCA。
 201   2        }
 202   1        else if(PCA_id == PCA2)
 203   1        {
 204   2          CR = 0;           //停止PCA。
 205   2          PWM2_high = pwm;      //数据在正确范围，则装入占空比寄存器。
 206   2          PWM2_low = PWM_DUTY - pwm;  //计算并保存PWM输出低电平的PCA时钟脉冲个数。
 207   2          CR = 1;           //启动PCA。
 208   2        }
 209   1      }
 210          
 211          //========================================================================
 212          // 函数: void PCA_Init(void)
 213          // 描述: PCA初始化程序.
 214          // 参数: none
 215          // 返回: none.
 216          // 版本: V1.0, 2013-11-22
 217          //========================================================================
 218          void  PCA_Init(void)
 219          {
 220   1        CR = 0;
 221   1        AUXR1 = (AUXR1 & ~(3<<4)) | PCA_P24_P25_P26_P27;  //切换IO口
 222   1        //使能PCA模块0_PWM输出0x4c|1 = 4d
 223   1        CCAPM0 = (PCA_Mode_HighPulseOutput | ENABLE); //16位软件定时、高速脉冲输出、中断模式
 224   1        CCAPM1 = (PCA_Mode_HighPulseOutput | ENABLE);
 225   1        CCAPM2 = (PCA_Mode_HighPulseOutput | ENABLE);
 226   1      
 227   1        CH = 0;//计数器清零
 228   1        CL = 0;
 229   1        CMOD  = (CMOD  & ~(7<<1)) | PCA_Clock_1T;     //选择时钟源
 230   1        PPCA  = 1;  // 高优先级中断
 231   1      
 232   1        pwm0 = (PWM_DUTY / 4 * 1);  //给PWM一个初值2000
 233   1        pwm1 = (PWM_DUTY / 4 * 2);
 234   1        pwm2 = (PWM_DUTY / 4 * 3);
 235   1      
 236   1        PWMn_Update(PCA0,pwm0);
 237   1        PWMn_Update(PCA1,pwm1);
 238   1        PWMn_Update(PCA2,pwm2);
 239   1      
 240   1        CR    = 1;  // 运行PCA定时器
 241   1      }
C51 COMPILER V9.60.0.0   MAIN_PCA_PWM                                                      02/07/2022 14:59:18 PAGE 5   

 242          //======================================================================
 243          
 244          //========================================================================
 245          // 函数: void PCA_Handler (void) interrupt 7
 246          // 描述: PCA中断处理程序.
 247          // 参数: None
 248          // 返回: none.
 249          // 版本: V1.0, 2012-11-22
 250          //========================================================================
 251          void  PCA_Handler (void) interrupt 7
 252          {
 253   1        if(CCF0)    //PCA模块0中断
 254   1        {
 255   2          CCF0 = 0;   //清PCA模块0中断标志
 256   2          if(P25) CCAP0_tmp += PWM0_high; //输出为高电平，则给影射寄存器装载高电平时间长度
 257   2          else  CCAP0_tmp += PWM0_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 258   2          CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L低8位
 259   2          CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H高8位
 260   2        }
 261   1      
 262   1        if(CCF1)  //PCA模块1中断
 263   1        {
 264   2          CCF1 = 0;   //清PCA模块1中断标志
 265   2          if(P26) CCAP1_tmp += PWM1_high; //输出为高电平，则给影射寄存器装载高电平时间长度
 266   2          else  CCAP1_tmp += PWM1_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 267   2          CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 268   2          CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 269   2        }
 270   1      
 271   1        if(CCF2)  //PCA模块2中断
 272   1        {
 273   2          CCF2 = 0;   //清PCA模块1中断标志
 274   2          if(P27) CCAP2_tmp += PWM2_high; //输出为高电平，则给影射寄存器装载高电平时间长度
 275   2          else  CCAP2_tmp += PWM2_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 276   2          CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 277   2          CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 278   2        }
 279   1      }
 280          
 281          
 282          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    461    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
