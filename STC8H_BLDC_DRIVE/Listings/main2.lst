C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN2
OBJECT MODULE PLACED IN .\Objects\main2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main2.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\mai
                    -n2.lst) TABS(2) OBJECT(.\Objects\main2.obj)

line level    source

   1          
   2          //BLDC无刷直流电机驱动(无HALL)
   3          //测试工作频率为11.0592MHz
   4          //本例程实现如下功能: 通过3组PWM通道控制无霍尔马达运转
   5          //本例程仅适用57BL02马达在24V无负载条件下演示
   6          
   7          #include "stc8h.h"
   8          #include "intrins.h"
   9          
  10          typedef unsigned char   u8;
  11          typedef unsigned int    u16;
  12          
  13          typedef struct TIM_struct
  14          {
  15              volatile unsigned char CR1;     /*!< control register 1 */
  16              volatile unsigned char CR2;     /*!< control register 2 */
  17              volatile unsigned char SMCR;    /*!< Synchro mode control register */
  18              volatile unsigned char ETR;     /*!< external trigger register */
  19              volatile unsigned char IER;     /*!< interrupt enable register*/
  20              volatile unsigned char SR1;     /*!< status register 1 */
  21              volatile unsigned char SR2;     /*!< status register 2 */
  22              volatile unsigned char EGR;     /*!< event generation register */
  23              volatile unsigned char CCMR1;   /*!< CC mode register 1 */
  24              volatile unsigned char CCMR2;   /*!< CC mode register 2 */
  25              volatile unsigned char CCMR3;   /*!< CC mode register 3 */
  26              volatile unsigned char CCMR4;   /*!< CC mode register 4 */
  27              volatile unsigned char CCER1;   /*!< CC enable register 1 */
  28              volatile unsigned char CCER2;   /*!< CC enable register 2 */
  29              volatile unsigned char CNTRH;   /*!< counter high */
  30              volatile unsigned char CNTRL;   /*!< counter low */
  31              volatile unsigned char PSCRH;   /*!< prescaler high */
  32              volatile unsigned char PSCRL;   /*!< prescaler low */
  33              volatile unsigned char ARRH;    /*!< auto-reload register high */
  34              volatile unsigned char ARRL;    /*!< auto-reload register low */
  35              volatile unsigned char RCR;     /*!< Repetition Counter register */
  36              volatile unsigned char CCR1H;   /*!< capture/compare register 1 high */
  37              volatile unsigned char CCR1L;   /*!< capture/compare register 1 low */
  38              volatile unsigned char CCR2H;   /*!< capture/compare register 2 high */
  39              volatile unsigned char CCR2L;   /*!< capture/compare register 2 low */
  40              volatile unsigned char CCR3H;   /*!< capture/compare register 3 high */
  41              volatile unsigned char CCR3L;   /*!< capture/compare register 3 low */
  42              volatile unsigned char CCR4H;   /*!< capture/compare register 3 high */
  43              volatile unsigned char CCR4L;   /*!< capture/compare register 3 low */
  44              volatile unsigned char BKR;     /*!< Break Register */
  45              volatile unsigned char DTR;     /*!< dead-time register */
  46              volatile unsigned char OISR;    /*!< Output idle register */
  47          }TIM_TypeDef;
  48          
  49          TIM_TypeDef *TIM1,*TIM2;
  50          
  51          #define TIM1_BaseAddress    0xFEC0
  52          #define TIM2_BaseAddress    0xFEE0
  53          
  54          #define TRUE        1
C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 2   

  55          #define FALSE       0
  56          
  57          #define RV09_CH     6
  58          
  59          #define TIM1_Period     ((u16)280)
  60          #define TIM1_STPulse    ((u16)245)
  61          
  62          #define START       0x1A
  63          #define RUN         0x1B
  64          #define STOP        0x1C
  65          #define IDLE        0x1D
  66          
  67          #define TIM1_OCMODE_MASK        ((u8)0x70)
  68          #define TIM1_OCCE_ENABLE        ((u8)0x80)
  69          #define TIM1_OCCE_DISABLE       ((u8)0x00)
  70          #define TIM1_OCMODE_TIMING      ((u8)0x00)
  71          #define TIM1_OCMODE_ACTIVE      ((u8)0x10)
  72          #define TIM1_OCMODE_INACTIVE    ((u8)0x20)
  73          #define TIM1_OCMODE_TOGGLE      ((u8)0x30)
  74          #define TIM1_FORCE_INACTIVE     ((u8)0x40)
  75          #define TIM1_FORCE_ACTIVE       ((u8)0x50)
  76          #define TIM1_OCMODE_PWMA        ((u8)0x60)
  77          #define TIM1_OCMODE_PWMB        ((u8)0x70)
  78          #define CC1_POLARITY_HIGH       ((u8)0x02)
  79          #define CC1N_POLARITY_HIGH      ((u8)0x08)
  80          #define CC2_POLARITY_HIGH       ((u8)0x20)
  81          #define CC2N_POLARITY_HIGH      ((u8)0x80)
  82          #define CC1_POLARITY_LOW        ((u8)~0x02)
  83          #define CC1N_POLARITY_LOW       ((u8)~0x08)
  84          #define CC2_POLARITY_LOW        ((u8)~0x20)
  85          #define CC2N_POLARITY_LOW       ((u8)~0x80)
  86          #define CC1_OCENABLE            ((u8)0x01)
  87          #define CC1N_OCENABLE           ((u8)0x04)
  88          #define CC2_OCENABLE            ((u8)0x10)
  89          #define CC2N_OCENABLE           ((u8)0x40)
  90          #define CC1_OCDISABLE           ((u8)~0x01)
  91          #define CC1N_OCDISABLE          ((u8)~0x04)
  92          #define CC2_OCDISABLE           ((u8)~0x10)
  93          #define CC2N_OCDISABLE          ((u8)~0x40)
  94          #define CC3_POLARITY_HIGH       ((u8)0x02)
  95          #define CC3N_POLARITY_HIGH      ((u8)0x08)
  96          #define CC4_POLARITY_HIGH       ((u8)0x20)
  97          #define CC4N_POLARITY_HIGH      ((u8)0x80)
  98          #define CC3_POLARITY_LOW        ((u8)~0x02)
  99          #define CC3N_POLARITY_LOW       ((u8)~0x08)
 100          #define CC4_POLARITY_LOW        ((u8)~0x20)
 101          #define CC4N_POLARITY_LOW       ((u8)~0x80)
 102          #define CC3_OCENABLE            ((u8)0x01)
 103          #define CC3N_OCENABLE           ((u8)0x04)
 104          #define CC4_OCENABLE            ((u8)0x10)
 105          #define CC4N_OCENABLE           ((u8)0x40)
 106          #define CC3_OCDISABLE           ((u8)~0x01)
 107          #define CC3N_OCDISABLE          ((u8)~0x04)
 108          #define CC4_OCDISABLE           ((u8)~0x10)
 109          #define CC4N_OCDISABLE          ((u8)~0x40)
 110          
 111          void UART_INIT();
 112          void DelayXus(unsigned char delayTime);
 113          void DelayXms( unsigned char delayTime);
 114          unsigned int ADC_Convert(u8 ch);
 115          void PWM_Init(void);
 116          void SPEED_ADJ();
C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 3   

 117          unsigned char RD_HALL();
 118          void MOTOR_START();
 119          void MOTOR_STOP();
 120          unsigned char KEY_detect();
 121          
 122          unsigned char Timer0_cnt=0xb0;
 123          unsigned int HA=0;
 124          unsigned int Motor_speed;
 125          unsigned char Motor_sta = IDLE;
 126          unsigned char BRK_occur=0;
 127          unsigned int TIM2_CAP1_v=0;
 128          unsigned int CAP1_avg=0;
 129          unsigned char CAP1_cnt=0;
 130          unsigned long CAP1_sum=0;
 131          
 132          void main(void)
 133          {
 134   1          
 135   1          unsigned int temp=0;
 136   1          unsigned int ADC_result=0;
 137   1        
 138   1          P_SW2= 0x80;
 139   1          P1 = 0x00;
 140   1          P0M1 = 0x0C;
 141   1          P0M0 = 0x01;
 142   1          P1M1 = 0xc0;
 143   1          P1M0 = 0x3F;
 144   1          P2M1 = 0x00;
 145   1          P2M0 = 0x38;
 146   1          P3M1 = 0x88;
 147   1          P3M0 = 0x02;
 148   1      
 149   1          ET0=1;
 150   1          TR0=0;
 151   1          ADCCFG = 0x0f;
 152   1          ADC_CONTR = 0x80;
 153   1      
 154   1          PWMA_ENO = 0x3F;                            //PWMA输出使能
 155   1          PWMB_ENO = 0x00;                            //PWMB输出使能
 156   1          PWMA_PS  = 0x00;                            //PWMA pin 选择
 157   1          PWMB_PS  = 0xD5;                            //PWMB pin 选择
 158   1      
 159   1          /**********************************************************
 160   1          输出比较模式 PWMx_duty = [CCRx/(ARR + 1)]*100
 161   1          ***********************************************************/
 162   1          /************PWMB  BMF输入 ****************/
 163   1          //////////// 时基单元 ////////////
 164   1      
 165   1          TIM2-> PSCRL = 15;
 166   1          TIM2-> ARRH = 0xff;                         //自动重装载寄存器，计数器 overflow 点
 167   1          TIM2-> ARRL = 0xff;
 168   1          TIM2-> CCR4H = 0x00;
 169   1          TIM2-> CCR4L = 0x05;
 170   1          //////////// 通道配置 ////////////
 171   1          TIM2-> CCMR1 = 0xf3;                        //通道模式配置
 172   1          TIM2-> CCMR2 = 0xf1;
 173   1          TIM2-> CCMR3 = 0xf1;
 174   1          TIM2-> CCMR4 = 0x70;
 175   1          TIM2-> CCER1 = 0x11;
 176   1          TIM2-> CCER2 = 0x11;
 177   1          //////////// 模式配置 ////////////
 178   1          TIM2-> CR2 = 0xf0;
C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 4   

 179   1          TIM2-> CR1 = 0x81;
 180   1          TIM2-> SMCR = 0x44;
 181   1          //////////// 使能 & 中断配置 ////////////
 182   1          TIM2-> BKR = 0x80;                          //主输出使能
 183   1          TIM2-> IER = 0x02;                          //使能中断
 184   1          /************PWMA 控制马达换相 ****************/
 185   1          //////////// 时基单元 ////////////
 186   1          TIM1-> PSCRH = 0x00;                        //预分频寄存器
 187   1          TIM1-> PSCRL = 0x00;
 188   1          TIM1-> ARRH = (u8)(TIM1_Period >> 8);
 189   1          TIM1-> ARRL = (u8)(TIM1_Period);
 190   1          //////////// 通道配置 ////////////
 191   1          TIM1-> CCMR1 = 0x70;                        //通道模式配置
 192   1          TIM1-> CCMR2 = 0x70;
 193   1          TIM1-> CCMR3 = 0x70;
 194   1          TIM1-> CCER1 = 0x11;                        //配置通道输出使能和极性
 195   1          TIM1-> CCER2 = 0x01;                        //配置通道输出使能和极性
 196   1          TIM1-> OISR = 0xAA;                         //配置 MOE=0 时各通道输出电平
 197   1          //////////// 模式配置 ////////////
 198   1          TIM1-> CR1 = 0xA0;
 199   1          TIM1-> CR2 = 0x24;
 200   1          TIM1-> SMCR = 0x20;
 201   1          TIM1-> BKR = 0x0c;
 202   1          //////////// 使能 & 中断配置 ////////////
 203   1          TIM1-> CR1 |= 0x01;                         //使能计数器
 204   1          EA = 1;
 205   1      
 206   1          UART_INIT();
 207   1      
 208   1          while (1)
 209   1          {
 210   2              switch(Motor_sta)
 211   2              {
 212   3                  case START:
 213   3                      MOTOR_START();
 214   3                      Motor_sta = RUN;
 215   3                      for(temp = TIM1_STPulse; temp > ADC_result; temp--) //开环启动
 216   3                      {
 217   4                          ADC_result = (ADC_Convert(RV09_CH)/4);
 218   4                          TIM1-> CCR1H = (u8)(temp >> 8);
 219   4                          TIM1-> CCR1L = (u8)(temp);
 220   4                          TIM1-> CCR2H = (u8)(temp >> 8);
 221   4                          TIM1-> CCR2L = (u8)(temp);
 222   4                          TIM1-> CCR3H = (u8)(temp >> 8);
 223   4                          TIM1-> CCR3L = (u8)(temp);
 224   4                          DelayXms(10);
 225   4                      }
 226   3                      break;
 227   3                  case RUN:
 228   3                      SPEED_ADJ();    //马达调速
 229   3                      if((BRK_occur == TRUE))
 230   3                      Motor_sta = STOP;
 231   3                      break;
 232   3                  case STOP:
 233   3                      MOTOR_STOP();
 234   3                      Motor_sta = IDLE;
 235   3                      break;
 236   3                  case IDLE:
 237   3                      if(KEY_detect()==1)
 238   3                      Motor_sta = START;              //启动马达
 239   3                      BRK_occur = FALSE;
 240   3                      Motor_speed = 0;
C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 5   

 241   3                      CAP1_avg = 0;
 242   3                      CAP1_cnt = 0;
 243   3                      CAP1_sum = 0;
 244   3                      break;
 245   3              }
 246   2          }
 247   1      }
 248          
 249          void TIM0_ISR() interrupt 1
 250          {
 251   1          if(Motor_sta == START)
 252   1          {
 253   2              if(Timer0_cnt<0xe0) Timer0_cnt++;
 254   2              TH0=Timer0_cnt;
 255   2      
 256   2              switch(HA%6)
 257   2              {
 258   3              case 0:
 259   3                  TIM1-> CCMR3 &= ~TIM1_OCMODE_MASK;
 260   3                  TIM1-> CCMR3 |= TIM1_FORCE_INACTIVE;
 261   3                  TIM1-> CCMR1 &= ~TIM1_OCMODE_MASK;
 262   3                  TIM1-> CCMR1 |= TIM1_OCMODE_PWMB;
 263   3                  break;
 264   3              case 1:
 265   3                  TIM1-> CCER1 &= CC2N_POLARITY_LOW;
 266   3                  TIM1-> CCER2 |= CC3N_POLARITY_HIGH;
 267   3                   break;
 268   3              case 2:
 269   3                  TIM1-> CCMR1 &= ~TIM1_OCMODE_MASK;
 270   3                  TIM1-> CCMR1 |= TIM1_FORCE_INACTIVE;
 271   3                  TIM1-> CCMR2 &= ~TIM1_OCMODE_MASK;
 272   3                  TIM1-> CCMR2 |= TIM1_OCMODE_PWMB;
 273   3                  break;
 274   3              case 3:
 275   3                  TIM1-> CCER1 |= CC1N_POLARITY_HIGH;
 276   3                  TIM1-> CCER2 &= CC3N_POLARITY_LOW;
 277   3                  break;
 278   3              case 4:
 279   3                  TIM1-> CCMR2 &= ~TIM1_OCMODE_MASK;
 280   3                  TIM1-> CCMR2 |= TIM1_FORCE_INACTIVE;
 281   3                  TIM1-> CCMR3 &= ~TIM1_OCMODE_MASK;
 282   3                  TIM1-> CCMR3 |= TIM1_OCMODE_PWMB;
 283   3                  break;
 284   3              case 5:
 285   3                  TIM1-> CCER1 &= CC1N_POLARITY_LOW;
 286   3                  TIM1-> CCER1 |= CC2N_POLARITY_HIGH;
 287   3                  break;
 288   3              }
 289   2              HA++;
 290   2          }
 291   1      
 292   1          if(Motor_sta == RUN)
 293   1          {
 294   2              TR0=0;
 295   2              switch(RD_HALL())
 296   2              {
 297   3              case 3:
 298   3                  TIM1-> CCMR3 &= ~TIM1_OCMODE_MASK;
 299   3                  TIM1-> CCMR3 |= TIM1_FORCE_INACTIVE;
 300   3                  TIM1-> CCMR1 &= ~TIM1_OCMODE_MASK;
 301   3                  TIM1-> CCMR1 |= TIM1_OCMODE_PWMB;
 302   3                  break;
C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 6   

 303   3              case 1:
 304   3                  TIM1-> CCER1 &= CC2N_POLARITY_LOW;
 305   3                  TIM1-> CCER2 |= CC3N_POLARITY_HIGH;
 306   3                  break;
 307   3              case 5:
 308   3                  TIM1-> CCMR1 &= ~TIM1_OCMODE_MASK;
 309   3                  TIM1-> CCMR1 |= TIM1_FORCE_INACTIVE;
 310   3                  TIM1-> CCMR2 &= ~TIM1_OCMODE_MASK;
 311   3                  TIM1-> CCMR2 |= TIM1_OCMODE_PWMB;
 312   3                  break;
 313   3              case 4:
 314   3                  TIM1-> CCER1 |= CC1N_POLARITY_HIGH;
 315   3                  TIM1-> CCER2 &= CC3N_POLARITY_LOW;
 316   3                  break;
 317   3              case 6:
 318   3                  TIM1-> CCMR2 &= ~TIM1_OCMODE_MASK;
 319   3                  TIM1-> CCMR2 |= TIM1_FORCE_INACTIVE;
 320   3                  TIM1-> CCMR3 &= ~TIM1_OCMODE_MASK;
 321   3                  TIM1-> CCMR3 |= TIM1_OCMODE_PWMB;
 322   3                  break;
 323   3              case 2:
 324   3                  TIM1-> CCER1 &= CC1N_POLARITY_LOW;
 325   3                  TIM1-> CCER1 |= CC2N_POLARITY_HIGH;
 326   3                  break;
 327   3              }
 328   2          }
 329   1      }
 330          
 331          void PWMA_ISR() interrupt 26
 332          {
 333   1          if((TIM1->SR1 & 0x20))
 334   1          {
 335   2              P00=0;
 336   2              CAP1_sum += TIM2_CAP1_v;
 337   2              CAP1_cnt++;
 338   2              if(CAP1_cnt==128)
 339   2              {
 340   3                  CAP1_cnt=0;
 341   3                  CAP1_avg = (CAP1_sum>>7);
 342   3                  CAP1_sum = 0;
 343   3                  Motor_speed = 5000000/CAP1_avg;
 344   3              }
 345   2              TIM1->SR1 &=~0x20;                      //清零
 346   2          }
 347   1          if((TIM1->SR1 & 0x80))                      //BRK
 348   1          {
 349   2              BRK_occur = TRUE;
 350   2              TIM1->SR1 &=~0x80;                      //清零
 351   2          }
 352   1      }
 353          
 354          void PWMB_ISR() interrupt 27
 355          {
 356   1          unsigned char ccr_tmp=0;
 357   1      
 358   1          if((TIM2->SR1 & 0X02))
 359   1          {
 360   2              ccr_tmp = TIM2-> CCR1H;
 361   2              if(ccr_tmp>1)                           //软件滤波
 362   2              {
 363   3                  TIM2_CAP1_v = ccr_tmp;
 364   3                  TIM2_CAP1_v = (TIM2_CAP1_v<<8) + TIM2->CCR1L;
C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 7   

 365   3                  if(Motor_sta == RUN)                //换向delay计时
 366   3                  {
 367   4                      TR0=1;
 368   4                      TH0 = 256-(TIM2_CAP1_v>>9);
 369   4                  }
 370   3              }
 371   2              TIM2->SR1 &=~0X02;
 372   2          }
 373   1      }
 374          
 375          void UART_INIT()
 376          {
 377   1          SCON = 0x50;                                //8位可变波特率
 378   1          AUXR = 0x40;                                //定时器1为1T模式
 379   1          TMOD = 0x20;                                //定时器1为模式0(16位自动重载)
 380   1      
 381   1          TL1 = 254;
 382   1          TH1 = 254;
 383   1      //  ET1 = 0;
 384   1          TR1 = 1;
 385   1      }
 386          
 387          void DelayXus(unsigned char delayTime)
 388          {
 389   1          int i = 0;
 390   1          while( delayTime--)
 391   1          {
 392   2              for( i = 0 ; i < 1 ; i++);
 393   2          }
 394   1      }
 395          
 396          void DelayXms( unsigned char delayTime )
 397          {
 398   1          int i = 0;
 399   1          while( delayTime--)
 400   1          {
 401   2              for( i = 0 ; i < 2 ; i++)
 402   2              {
 403   3                  DelayXus(100);
 404   3              }
 405   2          }
 406   1      }
 407          
 408          unsigned int ADC_Convert(u8 ch)
 409          {
 410   1          u16 res=0;
 411   1      
 412   1          ADC_CONTR &= ~0x0f;
 413   1          ADC_CONTR |= ch;
 414   1          ADC_CONTR |= 0x40;
 415   1          DelayXus(1);
 416   1          while (!(ADC_CONTR & 0x20));
 417   1          ADC_CONTR &= ~0x20;
 418   1      
 419   1          res = ADC_RES;
 420   1          res = (res<<2)+(ADC_RESL>>6);
 421   1      
 422   1          if (res < 360) res=360;
 423   1          if (res > 900) res=900;
 424   1      
 425   1          return res;
 426   1      }
C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 8   

 427          
 428          void SPEED_ADJ()
 429          {
 430   1          u16 ADC_result;
 431   1      
 432   1          ADC_result = (ADC_Convert(RV09_CH)/4);      //调速旋钮ADC采样
 433   1          TIM1-> CCR1H = (u8)(ADC_result >> 8);       //计数器比较值
 434   1          TIM1-> CCR1L = (u8)(ADC_result);
 435   1          TIM1-> CCR2H = (u8)(ADC_result >> 8);
 436   1          TIM1-> CCR2L = (u8)(ADC_result);
 437   1          TIM1-> CCR3H = (u8)(ADC_result >> 8);
 438   1          TIM1-> CCR3L = (u8)(ADC_result);
 439   1      }
 440          
 441          unsigned char RD_HALL()                         //读霍尔传感器
 442          {
 443   1          unsigned char Hall_sta = 0;
 444   1      
 445   1          DelayXus(40);
 446   1          (P17)? (Hall_sta|=0x01) : (Hall_sta&=~0x01);
 447   1          (P54)? (Hall_sta|=0x02) : (Hall_sta&=~0x02);
 448   1          (P33)? (Hall_sta|=0x04) : (Hall_sta&=~0x04);
 449   1      
 450   1          return Hall_sta;
 451   1      }
 452          
 453          void MOTOR_START()
 454          {
 455   1          TIM1-> CCR1H = (u8)(TIM1_STPulse >> 8);     //计数器比较值
 456   1          TIM1-> CCR1L = (u8)(TIM1_STPulse);
 457   1          TIM1-> CCR2H = (u8)(TIM1_STPulse >> 8);
 458   1          TIM1-> CCR2L = (u8)(TIM1_STPulse);
 459   1          TIM1-> CCR3H = (u8)(TIM1_STPulse >> 8);
 460   1          TIM1-> CCR3L = (u8)(TIM1_STPulse);
 461   1          TIM1-> BKR |= 0x80;                         //主输出使能相当于总开关
 462   1          TIM1-> IER = 0x00;                          //使能中断
 463   1          TR0 = 1;
 464   1      
 465   1          while (HA < 6*20);
 466   1      
 467   1          TIM1-> IER = 0xa0;                          //使能中断
 468   1      }
 469          
 470          void MOTOR_STOP()
 471          {
 472   1          TIM1-> BKR &= ~0x80;
 473   1          TIM1-> IER &= ~0x20;
 474   1      }
 475          
 476          unsigned char KEY_detect()
 477          {
 478   1          if(!P37)
 479   1          {
 480   2              DelayXms(10);
 481   2              if(!P37)
 482   2              {
 483   3                  return 1;
 484   3              }
 485   2              else return 0;
 486   2          }
 487   1          else if(!P03)
 488   1          {
C51 COMPILER V9.60.0.0   MAIN2                                                             04/27/2022 09:41:24 PAGE 9   

 489   2              DelayXms(10);
 490   2              if(!P03)
 491   2              {
 492   3                  return 2;
 493   3              }
 494   2              else return 0;
 495   2          }
 496   1          else return 0;
 497   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2018    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
