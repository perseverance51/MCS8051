C51 COMPILER V9.60.0.0   USART                                                             02/03/2022 12:45:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\usart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE usart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\STC15simpleMPU6050) DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\usart.lst) TABS(2) OBJECT(.\Objects\usart.obj)

line level    source

   1          #include "usart.h"
   2          
   3          #define   BaudRate1   9600L
   4          //#define   UART1_BUF_LENGTH  32
   5          #define RX1_Lenth   32      //串口接收缓冲长度
   6          #define Timer1_Reload (65536UL -(MAIN_Fosc / 4 / BaudRate1))    //Timer 1 重装值， 对应300KHZ
   7          
   8          
   9          unsigned char TX1_Cnt;  //发送计数
  10          unsigned char RX1_Cnt;  //接收计数
  11           unsigned char idata RX1_Buffer[32];
  12          bit B_TX1_Busy; //发送忙标志
  13            //========================================================================
  14          // 函数: void UART1_int (void) interrupt UART1_VECTOR
  15          // 描述: UART1中断函数。
  16          // 参数: nine.
  17          // 返回: none.
  18          // 版本: VER1.0
  19          // 日期: 2014-11-28
  20          // 备注: 
  21          //========================================================================
  22          void UART1_int (void) interrupt UART1_VECTOR
  23          {
  24   1        if(RI)
  25   1        {
  26   2          RI = 0;
  27   2          RX1_Buffer[RX1_Cnt] = SBUF;   //保存一个字节
  28   2          if(++RX1_Cnt >= RX1_Lenth)  RX1_Cnt = 0;  //避免溢出处理
  29   2        }
  30   1      
  31   1        if(TI)
  32   1        {
  33   2          TI = 0;
  34   2          B_TX1_Busy = 0;   //清除发送忙标志
  35   2        }
  36   1      }
  37          
  38          //extern bit  B_TX1_Busy; //发送忙标志
  39          void InitSerialPort(void)
  40          { 
  41   1        SCON = 0x50;      //8位数据，可变波特率
  42   1        AUXR |= 0x40;   //定时器时钟1T模式
  43   1        AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
  44   1        TMOD &= 0x0F;   //设置定时器模式
  45   1        TH1 = (u8)(Timer1_Reload >> 8);
  46   1        TL1 = (u8)Timer1_Reload;
  47   1        
  48   1        ET1 = 0;    //禁止定时器%d中断
  49   1        TR1 = 1;    //定时器1开始计时
  50   1            ES=1;         //串口中断开关,采用查询法时不用打开中断      
  51   1            REN=1;            //串口为工作方式1，允许接收数据
  52   1            SM0=0;          //SM0 SM1串口工作方式选择，01：8位异步收发，波特率由定时器决定
  53   1            SM1=1;
  54   1          EA = 1; //允许总中断
C51 COMPILER V9.60.0.0   USART                                                             02/03/2022 12:45:59 PAGE 2   

  55   1      }
  56          //========================================================================
  57          // 函数: void PrintString1(u8 *puts)
  58          // 描述: 串口1发送字符串函数。
  59          // 参数: puts:  字符串指针.
  60          // 返回: none.
  61          // 版本: VER1.0
  62          // 日期: 2014-11-28
  63          // 备注: 
  64          //========================================================================
  65          void PrintString1(u8 *puts) //发送一个字符串
  66          {
  67   1          for (; *puts != 0;  puts++)     //遇到停止符0结束
  68   1        {
  69   2          SBUF = *puts;
  70   2          B_TX1_Busy = 1;
  71   2          while(B_TX1_Busy);
  72   2        }
  73   1      }
  74          
  75          //重写putchar函数,方便调用printf串口打印输出
  76           char putchar(unsigned char c)
  77          {
  78   1             SBUF = c;          //发送数据
  79   1           while(!TI);          //等待发送完成
  80   1           TI=0;              //清零发送标志位;
  81   1        return c;
  82   1      }
  83          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    114    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =     32    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
