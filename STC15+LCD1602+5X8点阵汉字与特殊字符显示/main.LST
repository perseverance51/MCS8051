C51 COMPILER V9.60.0.0   MAIN                                                              07/18/2022 10:02:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\STC15+LCD1602+DS1302驱动显示程
                    -序) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          
   2          /*************  本程序功能说明  **************
   3          
   4          驱动LCD1602字符屏.
   5          
   6          显示效果为:  DS1302 + LCD1602显示时间
   7          
   8          ******************************************/
   9          #include  "STC15Fxxxx.H"
  10          
  11          #define T1MS (65536-MAIN_Fosc/12/1000)   //12T模式1ms定时
  12          #define  interval  1000 //设置延时时间间隔
  13          /*************  本地变量声明  **************/
  14          static volatile unsigned long sysRunmillis = 0; //系统运行时间计数，保存单片机从上电复位以来运行的时间，单
             -位是毫秒。该数值由定时器T0的中断响应子函数更新
  15          unsigned long previousMillis = 0;
  16          unsigned char str[4];//uchartostr函数转换的字符串 同时可以把16进制转成10进制
  17          sbit Buzzer = P3^7;
  18          unsigned char code table[]=
  19          {
  20              0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,        // 一，显示时的ASCII码 0x00
  21              0x00,0x00,0x00,0x0e,0x00,0xff,0x00,0x00,        // 二，显示时的ASCII码 0x01
  22              0x00,0x00,0xff,0x00,0x0e,0x00,0xff,0x00,        // 三，显示时的ASCII码 0x02
  23              0x00,0x00,0xff,0xf5,0xfb,0xf1,0xff,0x00,        // 四，显示时的ASCII码 0x03
  24              0x00,0xfe,0x08,0xfe,0x0a,0x0a,0xff,0x00,        // 五，显示时的ASCII码 0x04
  25              0x00,0x04,0x00,0xff,0x00,0x0a,0x11,0x00,        // 六，显示时的ASCII码 0x05
  26            0x00,0x1f,0x11,0x1f,0x11,0x11,0x1f,0x00,        // 日，显示时的ASCII码 0x06
  27            0x18,0x18,0x07,0x08,0x08,0x08,0x07,0x00,        // ℃，显示时的ASCII码 0x07
  28          };
  29          
  30          void Timer0Init(void);    //1毫秒@12.000MHz
  31          void  delay_ms(unsigned long ms);
  32          void  Initialize_LCD(void);
  33          void  Write_AC(u8 hang,u8 lie);
  34          void  Write_DIS_Data(u8 DIS_Data);
  35          void WriteROM();//LCD1602内部数据寄存器写入函数
  36          void  ClearLine(u8 row);
  37          u8    BIN_ASCII(u8 tmp);
  38          void  PutString(u8 row, u8 column, u8 *puts);
  39          void  WriteChar(u8 row, u8 column, u8 dat);
  40          void Buzzer_Di(void);
  41          unsigned char *uchartostr(unsigned num);  //将一个字节的数据转换为字符串 或10进制
  42          //========================================================================
  43          // 函数: void main(void)
  44          // 描述: 主函数。
  45          // 参数: none.
  46          // 返回: none.
  47          // 版本: VER1.0
  48          // 日期: 2013-4-1
  49          // 备注: 
  50          //========================================================================
  51          void main(void)
  52          {
  53   1        unsigned long currentMillis;//当前时间
C51 COMPILER V9.60.0.0   MAIN                                                              07/18/2022 10:02:20 PAGE 2   

  54   1        unsigned char i =0;
  55   1        P0M1 = 0; P0M0 = 0; //设置为准双向口
  56   1        P1M1 = 0; P1M0 = 0; //设置为准双向口
  57   1        P2M1 = 0; P2M0 = 0; //设置为准双向口
  58   1        P3M1 = 0; P3M0 = 0; //设置为准双向口
  59   1        P4M1 = 0; P4M0 = 0; //设置为准双向口
  60   1        P5M1 = 0; P5M0 = 0; //设置为准双向口
  61   1        P6M1 = 0; P6M0 = 0; //设置为准双向口
  62   1        P7M1 = 0; P7M0 = 0; //设置为准双向口
  63   1        Timer0Init(); //1毫秒@12.000MHz
  64   1        Initialize_LCD();//LCD初始化函数
  65   1        ClearLine(0);
  66   1        ClearLine(1);
  67   1        PutString(0,0,"STC15W4K");
  68   1        WriteROM();        // 将自定义字形码写入LCD1602内部存储器
  69   1        WriteChar(1, 0, 0);
  70   1        WriteChar(1, 1, 1);
  71   1        WriteChar(1, 2, 2);
  72   1        WriteChar(1, 3, 3);
  73   1        WriteChar(1, 4, 4);
  74   1        WriteChar(1, 5, 5);
  75   1        WriteChar(1, 6, 6);
  76   1        WriteChar(1, 7, 7);
  77   1        while(1)
  78   1        {
  79   2          currentMillis = sysRunmillis; 
  80   2        if (currentMillis - previousMillis  >= interval)
  81   2          {//每隔1秒翻转一次
  82   3          previousMillis = sysRunmillis;
  83   3          if(++i <= 255){
  84   4            PutString(0,9,uchartostr(i));
  85   4            WriteChar(0, 14, i);  
  86   4            
  87   4            PutString(1,9,uchartostr(255 -i));
  88   4            WriteChar(1, 14, 255 -i);
  89   4            
  90   4          }
  91   3          
  92   3        }
  93   2        }
  94   1      
  95   1      } 
  96          
  97          void Timer0Init(void)   //1毫秒@12.000MHz
  98          {
  99   1        AUXR &= 0x7F;   //定时器时钟12T模式
 100   1        TMOD &= 0xF0;   //设置定时器模式
 101   1        TL0 = T1MS ;    //设置定时初始值
 102   1        TH0 = T1MS >>8;   //设置定时初始值
 103   1      //  TL0 = 0x18;   //设置定时初始值
 104   1      //  TH0 = 0xFC;   //设置定时初始值
 105   1        
 106   1        TF0 = 0;    //清除TF0标志
 107   1        TR0 = 1;    //定时器0开始计时
 108   1        ET0 = 1;     //enable timer0 interrupt
 109   1        EA = 1;      //open global interrupt switch
 110   1      }
 111          
 112          /* Timer0 interrupt routine */
 113          void tm0_isr() interrupt 1
 114          {
 115   1      //  TL0 = 0x18;   //设置定时初始值
C51 COMPILER V9.60.0.0   MAIN                                                              07/18/2022 10:02:20 PAGE 3   

 116   1      //  TH0 = 0xFC;   //设置定时初始值
 117   1          TL0 = T1MS;                     //reload timer0 low byte
 118   1          TH0 = T1MS >> 8;                //reload timer0 high byte
 119   1        sysRunmillis ++;
 120   1      }
 121          
 122          
 123          //========================================================================
 124          // 函数: void  delay_ms(u8 ms)
 125          // 描述: 延时函数。
 126          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 127          // 返回: none.
 128          // 版本: VER1.0
 129          // 日期: 2013-4-1
 130          // 备注: 
 131          //========================================================================
 132          void  delay_ms(unsigned long ms)
 133          {
 134   1        unsigned long temp = sysRunmillis ;
 135   1          while(sysRunmillis - temp < ms );
 136   1      //     unsigned int i;
 137   1      //   do{
 138   1      //        i = MAIN_Fosc / 13000;
 139   1      //      while(--i)  ;   //14T per loop
 140   1      //     }while(--ms);
 141   1      }
 142          
 143          
 144          
 145          
 146          /************* LCD1602相关程序  *****************************************************/
 147          //8位数据访问方式 LCD1602   标准程序  梁工编写  2014-2-21
 148          
 149          #define LineLength  16    //16x2
 150          
 151          /*************  Pin define  *****************************************************/
 152          
 153          sfr   LCD_BUS = 0x80; //P0--0x80, P1--0x90, P2--0xA0, P3--0xB0
 154          
 155          sbit  LCD_B7  = LCD_BUS^7;  //D7 -- Pin 14    LED- -- Pin 16 
 156          sbit  LCD_B6  = LCD_BUS^6;  //D6 -- Pin 13    LED+ -- Pin 15
 157          sbit  LCD_B5  = LCD_BUS^5;  //D5 -- Pin 12    Vo   -- Pin 3
 158          sbit  LCD_B4  = LCD_BUS^4;  //D4 -- Pin 11    VDD  -- Pin 2
 159          sbit  LCD_B3  = LCD_BUS^3;  //D3 -- Pin 10    VSS  -- Pin 1
 160          sbit  LCD_B2  = LCD_BUS^2;  //D2 -- Pin  9
 161          sbit  LCD_B1  = LCD_BUS^1;  //D1 -- Pin  8
 162          sbit  LCD_B0  = LCD_BUS^0;  //D0 -- Pin  7
 163          
 164          sbit  LCD_ENA = P2^2; //Pin 6
 165          sbit  LCD_RW  = P2^1; //Pin 5 //LCD_RS   R/W   DB7--DB0        FOUNCTION
 166          sbit  LCD_RS  = P2^0; //Pin 4 //  0   0   INPUT      write the command to LCD model
 167                          //  0   1     OUTPUT     read BF and AC pointer from LCD model
 168                          //  1   0     INPUT      write the data to LCD  model
 169                          //  1   1     OUTPUT     read the data from LCD model
 170          /*
 171          total 2 lines, 16x2= 32
 172          first line address:  0~15
 173          second line address: 64~79
 174          
 175          */
 176          
 177          #define C_CLEAR     0x01    //clear LCD
C51 COMPILER V9.60.0.0   MAIN                                                              07/18/2022 10:02:20 PAGE 4   

 178          #define C_HOME      0x02    //cursor go home
 179          #define C_CUR_L     0x04    //cursor shift left after input
 180          #define C_RIGHT     0x05    //picture shift right after input
 181          #define C_CUR_R     0x06    //cursor shift right after input
 182          #define C_LEFT      0x07    //picture shift left after input
 183          #define C_OFF       0x08    //turn off LCD
 184          #define C_ON        0x0C    //turn on  LCD
 185          #define C_FLASH     0x0D    //turn on  LCD, flash 
 186          #define C_CURSOR    0x0E    //turn on  LCD and cursor
 187          #define C_FLASH_ALL   0x0F    //turn on  LCD and cursor, flash
 188          #define C_CURSOR_LEFT 0x10    //single cursor shift left
 189          #define C_CURSOR_RIGHT  0x10    //single cursor shift right
 190          #define C_PICTURE_LEFT  0x10    //single picture shift left
 191          #define C_PICTURE_RIGHT 0x10    //single picture shift right
 192          #define C_BIT8      0x30    //set the data is 8 bits
 193          #define C_BIT4      0x20    //set the data is 4 bits
 194          #define C_L1DOT7    0x30    //8 bits,one line 5*7  dots
 195          #define C_L1DOT10   0x34    //8 bits,one line 5*10 dots
 196          #define C_L2DOT7    0x38    //8 bits,tow lines 5*7 dots
 197          #define C_4bitL2DOT7  0x28    //4 bits,tow lines 5*7 dots
 198          #define C_CGADDRESS0  0x40    //CGRAM address0 (addr=40H+x)
 199          #define C_DDADDRESS0  0x80    //DDRAM address0 (addr=80H+x)
 200          
 201          
 202          #define LCD_DelayNop()  NOP(15)
 203          
 204          #define   LCD_BusData(dat)  LCD_BUS = dat
 205          
 206          
 207          //========================================================================
 208          // 函数: void CheckBusy(void)
 209          // 描述: 检测忙函数
 210          // 参数: none.
 211          // 返回: none.
 212          // 版本: VER1.0
 213          // 日期: 2013-4-1
 214          // 备注: 
 215          //========================================================================
 216          void  CheckBusy(void)
 217          {
 218   1        u16 i;
 219   1        for(i=0; i<5000; i++) {if(!LCD_B7)  break;}   //check the LCD busy or not. With time out
 220   1      //  while(LCD_B7);      //check the LCD busy or not. Without time out
 221   1      }
 222          
 223          //========================================================================
 224          // 函数: void IniSendCMD(u8 cmd)
 225          // 描述: 初始化写命令(不检测忙)
 226          // 参数: cmd: 要写的命令.
 227          // 返回: none.
 228          // 版本: VER1.0
 229          // 日期: 2013-4-1
 230          // 备注: 
 231          //========================================================================
 232          void IniSendCMD(u8 cmd)
 233          {
 234   1        LCD_RW = 0;
 235   1        LCD_BusData(cmd);
 236   1        LCD_DelayNop();
 237   1        LCD_ENA = 1;
 238   1        LCD_DelayNop();
 239   1        LCD_ENA = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              07/18/2022 10:02:20 PAGE 5   

 240   1        LCD_BusData(0xff);
 241   1      }
 242          
 243          //========================================================================
 244          // 函数: void Write_CMD(u8 cmd)
 245          // 描述: 写命令(检测忙)
 246          // 参数: cmd: 要写的命令.
 247          // 返回: none.
 248          // 版本: VER1.0
 249          // 日期: 2013-4-1
 250          // 备注: 
 251          //========================================================================
 252          void Write_CMD(u8 cmd)
 253          {
 254   1        LCD_RS  = 0;
 255   1        LCD_RW = 1;
 256   1        LCD_BusData(0xff);
 257   1        LCD_DelayNop();
 258   1        LCD_ENA = 1;
 259   1        CheckBusy();      //check the LCD busy or not.
 260   1        LCD_ENA = 0;
 261   1        LCD_RW = 0;
 262   1        
 263   1        LCD_BusData(cmd);
 264   1        LCD_DelayNop();
 265   1        LCD_ENA = 1;
 266   1        LCD_DelayNop();
 267   1        LCD_ENA = 0;
 268   1        LCD_BusData(0xff);
 269   1      }
 270          
 271          //========================================================================
 272          // 函数: void Write_DIS_Data(u8 dat)
 273          // 描述: 写显示数据(检测忙)
 274          // 参数: dat: 要写的数据.
 275          // 返回: none.
 276          // 版本: VER1.0
 277          // 日期: 2013-4-1
 278          // 备注: 
 279          //========================================================================
 280          void Write_DIS_Data(u8 dat)
 281          {
 282   1        LCD_RS = 0;
 283   1        LCD_RW = 1;
 284   1      
 285   1        LCD_BusData(0xff);
 286   1        LCD_DelayNop();
 287   1        LCD_ENA = 1;
 288   1        CheckBusy();      //check the LCD busy or not.
 289   1        LCD_ENA = 0;
 290   1        LCD_RW = 0;
 291   1        LCD_RS  = 1;
 292   1      
 293   1        LCD_BusData(dat);
 294   1        LCD_DelayNop();
 295   1        LCD_ENA = 1;
 296   1        LCD_DelayNop();
 297   1        LCD_ENA = 0;
 298   1        LCD_BusData(0xff);
 299   1      }
 300          
 301          unsigned char *uchartostr(unsigned num) //将一个字节的数据转换为字符串 或10进制
C51 COMPILER V9.60.0.0   MAIN                                                              07/18/2022 10:02:20 PAGE 6   

 302          {
 303   1        unsigned char x2,x1,x0,i;
 304   1        x2=num/100;
 305   1        x1=num%100/10;
 306   1        x0=num%100%10;
 307   1        i=0;
 308   1        if(x2!=0)
 309   1        {
 310   2          str[i]=x2+48;
 311   2          i++;
 312   2        }
 313   1        if(x1!=0)
 314   1        {
 315   2          str[i]=x1+48;
 316   2          i++;
 317   2        }
 318   1        str[i]=x0+48;
 319   1        i++;
 320   1        str[i]='\0';
 321   1        return str;
 322   1      }
 323          
 324          //========================================================================
 325          // 函数: void Initialize_LCD(void)
 326          // 描述: 初始化函数
 327          // 参数: none.
 328          // 返回: none.
 329          // 版本: VER1.0
 330          // 日期: 2013-4-1
 331          // 备注: 
 332          //========================================================================
 333          void Initialize_LCD(void)
 334          {
 335   1        LCD_ENA = 0;
 336   1        LCD_RS  = 0;
 337   1        LCD_RW = 0;
 338   1      
 339   1        delay_ms(100);
 340   1        IniSendCMD(C_BIT8);   //set the data is 8 bits
 341   1      
 342   1        delay_ms(10);
 343   1        Write_CMD(C_L2DOT7);    //tow lines 5*7 dots
 344   1      
 345   1        delay_ms(6);
 346   1        Write_CMD(C_CLEAR);   //clear LCD RAM
 347   1        Write_CMD(C_CUR_R);   //Curror Shift Right
 348   1        Write_CMD(C_ON);    //turn on  LCD
 349   1      }
 350          
 351          
 352          
 353          //========================================================================
 354          // 函数: void ClearLine(u8 row)
 355          // 描述: 清除1行
 356          // 参数: row: 行(0或1)
 357          // 返回: none.
 358          // 版本: VER1.0
 359          // 日期: 2013-4-1
 360          // 备注: 
 361          //========================================================================
 362          void ClearLine(u8 row)
 363          {
C51 COMPILER V9.60.0.0   MAIN                                                              07/18/2022 10:02:20 PAGE 7   

 364   1        u8 i;
 365   1        Write_CMD(((row & 1) << 6) | 0x80);
 366   1        for(i=0; i<LineLength; i++) Write_DIS_Data(' ');
 367   1      }
 368          
 369          //========================================================================
 370          // 函数: void WriteChar(u8 row, u8 column, u8 dat)
 371          // 描述: 指定行、列和字符, 写一个字符
 372          // 参数: row: 行(0或1),  column: 第几个字符(0~15),  dat: 要写的字符.
 373          // 返回: none.
 374          // 版本: VER1.0
 375          // 日期: 2013-4-1
 376          // 备注: 
 377          //========================================================================
 378          void  WriteChar(u8 row, u8 column, u8 dat)
 379          {
 380   1        Write_CMD((((row & 1) << 6) + column) | 0x80);
 381   1        Write_DIS_Data(dat);
 382   1      }
 383          
 384          //========================================================================
 385          // 函数: void PutString(u8 row, u8 column, u8 *puts)
 386          // 描述: 写一个字符串，指定行、列和字符串首地址
 387          // 参数: row: 行(0或1),  column: 第几个字符(0~15),  puts: 要写的字符串指针.
 388          // 返回: none.
 389          // 版本: VER1.0
 390          // 日期: 2013-4-1
 391          // 备注: 
 392          //========================================================================
 393          void PutString(u8 row, u8 column, u8 *puts)
 394          {
 395   1        Write_CMD((((row & 1) << 6) + column) | 0x80);
 396   1        for ( ;  *puts != 0;  puts++)   //遇到停止符0结束
 397   1        {
 398   2          Write_DIS_Data(*puts);
 399   2          if(++column >= LineLength)  break;
 400   2        }
 401   1      }
 402          void WriteROM()//LCD1602内部数据寄存器写入函数
 403          {
 404   1          unsigned char i;
 405   1        Write_CMD(0x40);       // 操作CGRAM的命令码
 406   1        for(i=0;i<64;i++)            // 写入数组中数据  
 407   1        {
 408   2          Write_DIS_Data(table[i]);
 409   2        }
 410   1      }
 411          
 412          //******************** LCD20 Module END ***************************
 413          //****************************************************
 414          //蜂鸣器程序
 415          //****************************************************
 416          void Buzzer_Di(void){
 417   1        Buzzer = 0;
 418   1        delay_ms(3);
 419   1        Buzzer = 1;
 420   1        delay_ms(3);
 421   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    943    ----
C51 COMPILER V9.60.0.0   MAIN                                                              07/18/2022 10:02:20 PAGE 8   

   CONSTANT SIZE    =     73    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
