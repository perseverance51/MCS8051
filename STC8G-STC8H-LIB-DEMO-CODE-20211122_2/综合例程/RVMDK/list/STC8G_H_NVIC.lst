C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      10/19/2021 09:02:20 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE STC8G_H_NVIC
OBJECT MODULE PLACED IN .\list\STC8G_H_NVIC.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Driver\src\STC8G_H_NVIC.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(
                    -..\Driver\inc;..\User;..\App\inc) DEBUG PRINT(.\list\STC8G_H_NVIC.lst) TABS(2) OBJECT(.\list\STC8G_H_NVIC.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "STC8G_H_NVIC.h"
  14          
  15          //========================================================================
  16          // 函数: NVIC_Timer0_Init
  17          // 描述: Timer0嵌套向量中断控制器初始化.
  18          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  19          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  20          // 返回: 执行结果 SUCCESS/FAIL.
  21          // 版本: V1.0, 2020-09-29
  22          //========================================================================
  23          u8 NVIC_Timer0_Init(u8 State, u8 Priority)
  24          {
  25   1        if(State > ENABLE) return FAIL;
  26   1        if(Priority > Priority_3) return FAIL;
  27   1        Timer0_Interrupt(State);
  28   1        Timer0_Priority(Priority);
  29   1        return SUCCESS;
  30   1      }
  31          
  32          //========================================================================
  33          // 函数: NVIC_Timer1_Init
  34          // 描述: Timer1嵌套向量中断控制器初始化.
  35          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  36          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  37          // 返回: 执行结果 SUCCESS/FAIL.
  38          // 版本: V1.0, 2020-09-29
  39          //========================================================================
  40          u8 NVIC_Timer1_Init(u8 State, u8 Priority)
  41          {
  42   1        if(State > ENABLE) return FAIL;
  43   1        if(Priority > Priority_3) return FAIL;
  44   1        Timer1_Interrupt(State);
  45   1        Timer1_Priority(Priority);
  46   1        return SUCCESS;
  47   1      }
  48          
  49          //========================================================================
  50          // 函数: NVIC_Timer2_Init
  51          // 描述: Timer2嵌套向量中断控制器初始化.
  52          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  53          // 参数: Priority: 中断优先级, NULL.
  54          // 返回: 执行结果 SUCCESS/FAIL.
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      10/19/2021 09:02:20 PAGE 2   

  55          // 版本: V1.0, 2020-09-29
  56          //========================================================================
  57          u8 NVIC_Timer2_Init(u8 State, u8 Priority)
  58          {
  59   1        if(State > ENABLE) return FAIL;
  60   1        if(Priority > Priority_3) return FAIL;
  61   1        Timer2_Interrupt(State);
  62   1        Priority = NULL;
  63   1        return SUCCESS;
  64   1      }
  65          
  66          //========================================================================
  67          // 函数: NVIC_Timer3_Init
  68          // 描述: Timer3嵌套向量中断控制器初始化.
  69          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  70          // 参数: Priority: 中断优先级, NULL.
  71          // 返回: 执行结果 SUCCESS/FAIL.
  72          // 版本: V1.0, 2020-09-29
  73          //========================================================================
  74          u8 NVIC_Timer3_Init(u8 State, u8 Priority)
  75          {
  76   1        if(State > ENABLE) return FAIL;
  77   1        if(Priority > Priority_3) return FAIL;
  78   1        Timer3_Interrupt(State);
  79   1        Priority = NULL;
  80   1        return SUCCESS;
  81   1      }
  82          
  83          //========================================================================
  84          // 函数: NVIC_Timer4_Init
  85          // 描述: Timer4嵌套向量中断控制器初始化.
  86          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  87          // 参数: Priority: 中断优先级, NULL.
  88          // 返回: 执行结果 SUCCESS/FAIL.
  89          // 版本: V1.0, 2020-09-29
  90          //========================================================================
  91          u8 NVIC_Timer4_Init(u8 State, u8 Priority)
  92          {
  93   1        if(State > ENABLE) return FAIL;
  94   1        if(Priority > Priority_3) return FAIL;
  95   1        Timer4_Interrupt(State);
  96   1        Priority = NULL;
  97   1        return SUCCESS;
  98   1      }
  99          
 100          //========================================================================
 101          // 函数: NVIC_INT0_Init
 102          // 描述: INT0嵌套向量中断控制器初始化.
 103          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 104          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 105          // 返回: 执行结果 SUCCESS/FAIL.
 106          // 版本: V1.0, 2020-09-29
 107          //========================================================================
 108          u8 NVIC_INT0_Init(u8 State, u8 Priority)
 109          {
 110   1        if(State > ENABLE) return FAIL;
 111   1        if(Priority > Priority_3) return FAIL;
 112   1        INT0_Interrupt(State);
 113   1        INT0_Priority(Priority);
 114   1        return SUCCESS;
 115   1      }
 116          
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      10/19/2021 09:02:20 PAGE 3   

 117          //========================================================================
 118          // 函数: NVIC_INT1_Init
 119          // 描述: INT1嵌套向量中断控制器初始化.
 120          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 121          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 122          // 返回: 执行结果 SUCCESS/FAIL.
 123          // 版本: V1.0, 2020-09-29
 124          //========================================================================
 125          u8 NVIC_INT1_Init(u8 State, u8 Priority)
 126          {
 127   1        if(State > ENABLE) return FAIL;
 128   1        if(Priority > Priority_3) return FAIL;
 129   1        INT1_Interrupt(State);
 130   1        INT1_Priority(Priority);
 131   1        return SUCCESS;
 132   1      }
 133          
 134          //========================================================================
 135          // 函数: NVIC_INT2_Init
 136          // 描述: INT2嵌套向量中断控制器初始化.
 137          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 138          // 参数: Priority: 中断优先级, NULL.
 139          // 返回: 执行结果 SUCCESS/FAIL.
 140          // 版本: V1.0, 2020-09-29
 141          //========================================================================
 142          u8 NVIC_INT2_Init(u8 State, u8 Priority)
 143          {
 144   1        if(State > ENABLE) return FAIL;
 145   1        INT2_Interrupt(State);
 146   1        Priority = NULL;
 147   1        return SUCCESS;
 148   1      }
 149          
 150          //========================================================================
 151          // 函数: NVIC_INT3_Init
 152          // 描述: INT3嵌套向量中断控制器初始化.
 153          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 154          // 参数: Priority: 中断优先级, NULL.
 155          // 返回: 执行结果 SUCCESS/FAIL.
 156          // 版本: V1.0, 2020-09-29
 157          //========================================================================
 158          u8 NVIC_INT3_Init(u8 State, u8 Priority)
 159          {
 160   1        if(State > ENABLE) return FAIL;
 161   1        INT3_Interrupt(State);
 162   1        Priority = NULL;
 163   1        return SUCCESS;
 164   1      }
 165          
 166          //========================================================================
 167          // 函数: NVIC_INT4_Init
 168          // 描述: INT4嵌套向量中断控制器初始化.
 169          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 170          // 参数: Priority: 中断优先级, NULL.
 171          // 返回: 执行结果 SUCCESS/FAIL.
 172          // 版本: V1.0, 2020-09-29
 173          //========================================================================
 174          u8 NVIC_INT4_Init(u8 State, u8 Priority)
 175          {
 176   1        if(State > ENABLE) return FAIL;
 177   1        INT4_Interrupt(State);
 178   1        Priority = NULL;
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      10/19/2021 09:02:20 PAGE 4   

 179   1        return SUCCESS;
 180   1      }
 181          
 182          //========================================================================
 183          // 函数: NVIC_ADC_Init
 184          // 描述: ADC嵌套向量中断控制器初始化.
 185          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 186          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 187          // 返回: 执行结果 SUCCESS/FAIL.
 188          // 版本: V1.0, 2020-09-29
 189          //========================================================================
 190          u8 NVIC_ADC_Init(u8 State, u8 Priority)
 191          {
 192   1        if(State > ENABLE) return FAIL;
 193   1        if(Priority > Priority_3) return FAIL;
 194   1        ADC_Interrupt(State);
 195   1        ADC_Priority(Priority);
 196   1        return SUCCESS;
 197   1      }
 198          
 199          //========================================================================
 200          // 函数: NVIC_CMP_Init
 201          // 描述: 比较器嵌套向量中断控制器初始化.
 202          // 参数: State:    中断使能状态, RISING_EDGE/FALLING_EDGE/DISABLE.
 203          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 204          // 返回: 执行结果 SUCCESS/FAIL.
 205          // 版本: V1.0, 2020-09-29
 206          //========================================================================
 207          u8 NVIC_CMP_Init(u8 State, u8 Priority)
 208          {
 209   1        if(Priority > Priority_3) return FAIL;
 210   1        if(State & RISING_EDGE) CMPCR1 |= PIE;      //允许上升沿中断
 211   1        else  CMPCR1 &= ~PIE;     //禁止上升沿中断
 212   1        if(State & FALLING_EDGE)  CMPCR1 |= NIE;    //允许下降沿中断
 213   1        else  CMPCR1 &= ~NIE;     //禁止上升沿中断
 214   1        CMP_Priority(Priority);
 215   1        return SUCCESS;
 216   1      }
 217          
 218          //========================================================================
 219          // 函数: NVIC_I2C_Init
 220          // 描述: I2C嵌套向量中断控制器初始化.
 221          // 参数: Mode:     模式, I2C_Mode_Master/I2C_Mode_Slave.
 222          // 参数: State:    中断使能状态, I2C_Mode_Master: ENABLE/DISABLE.
 223          //                              I2C_Mode_Slave: I2C_ESTAI/I2C_ERXI/I2C_ETXI/I2C_ESTOI/DISABLE.
 224          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 225          // 返回: 执行结果 SUCCESS/FAIL.
 226          // 版本: V1.0, 2020-09-29
 227          //========================================================================
 228          u8 NVIC_I2C_Init(u8 Mode, u8 State, u8 Priority)
 229          {
 230   1        if(Mode > I2C_Mode_Master) return FAIL;
 231   1        if(Priority > Priority_3) return FAIL;
 232   1        EAXSFR();   /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
 233   1        if(Mode == I2C_Mode_Master)
 234   1        {
 235   2          I2C_Master_Inturrupt(State);
 236   2        }
 237   1        else if(Mode == I2C_Mode_Slave)
 238   1        {
 239   2          I2CSLCR = (I2CSLCR & ~0x78) | State;
 240   2        }
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      10/19/2021 09:02:20 PAGE 5   

 241   1        EAXRAM();   /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
 242   1        CMP_Priority(Priority);
 243   1        return SUCCESS;
 244   1      }
 245          
 246          //========================================================================
 247          // 函数: NVIC_UART1_Init
 248          // 描述: UART1嵌套向量中断控制器初始化.
 249          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 250          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 251          // 返回: 执行结果 SUCCESS/FAIL.
 252          // 版本: V1.0, 2020-09-29
 253          //========================================================================
 254          u8 NVIC_UART1_Init(u8 State, u8 Priority)
 255          {
 256   1        if(State > ENABLE) return FAIL;
 257   1        if(Priority > Priority_3) return FAIL;
 258   1        UART1_Interrupt(State);
 259   1        UART1_Priority(Priority);
 260   1        return SUCCESS;
 261   1      }
 262          
 263          //========================================================================
 264          // 函数: NVIC_UART2_Init
 265          // 描述: UART2嵌套向量中断控制器初始化.
 266          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 267          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 268          // 返回: 执行结果 SUCCESS/FAIL.
 269          // 版本: V1.0, 2020-09-29
 270          //========================================================================
 271          u8 NVIC_UART2_Init(u8 State, u8 Priority)
 272          {
 273   1        if(State > ENABLE) return FAIL;
 274   1        if(Priority > Priority_3) return FAIL;
 275   1        UART2_Interrupt(State);
 276   1        UART2_Priority(Priority);
 277   1        return SUCCESS;
 278   1      }
 279          
 280          //========================================================================
 281          // 函数: NVIC_UART3_Init
 282          // 描述: UART3嵌套向量中断控制器初始化.
 283          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 284          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 285          // 返回: 执行结果 SUCCESS/FAIL.
 286          // 版本: V1.0, 2020-09-29
 287          //========================================================================
 288          u8 NVIC_UART3_Init(u8 State, u8 Priority)
 289          {
 290   1        if(State > ENABLE) return FAIL;
 291   1        if(Priority > Priority_3) return FAIL;
 292   1        UART3_Interrupt(State);
 293   1        UART3_Priority(Priority);
 294   1        return SUCCESS;
 295   1      }
 296          
 297          //========================================================================
 298          // 函数: NVIC_UART4_Init
 299          // 描述: UART4嵌套向量中断控制器初始化.
 300          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 301          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 302          // 返回: 执行结果 SUCCESS/FAIL.
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      10/19/2021 09:02:20 PAGE 6   

 303          // 版本: V1.0, 2020-09-29
 304          //========================================================================
 305          u8 NVIC_UART4_Init(u8 State, u8 Priority)
 306          {
 307   1        if(State > ENABLE) return FAIL;
 308   1        if(Priority > Priority_3) return FAIL;
 309   1        UART4_Interrupt(State);
 310   1        UART4_Priority(Priority);
 311   1        return SUCCESS;
 312   1      }
 313          
 314          //========================================================================
 315          // 函数: NVIC_SPI_Init
 316          // 描述: SPI嵌套向量中断控制器初始化.
 317          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 318          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 319          // 返回: 执行结果 SUCCESS/FAIL.
 320          // 版本: V1.0, 2020-09-29
 321          //========================================================================
 322          u8 NVIC_SPI_Init(u8 State, u8 Priority)
 323          {
 324   1        if(State > ENABLE) return FAIL;
 325   1        if(Priority > Priority_3) return FAIL;
 326   1        SPI_Interrupt(State);
 327   1        SPI_Priority(Priority);
 328   1        return SUCCESS;
 329   1      }
 330          
 331          //========================================================================
 332          // 函数: NVIC_PWM_Init
 333          // 描述: PWM嵌套向量中断控制器初始化.
 334          // 参数: Channel:  通道, PWMA/PWMB.
 335          // 参数: State:    中断使能状态, PWM_BIE/PWM_TIE/PWM_COMIE/PWM_CC8IE~PWM_CC1IE/PWM_UIE/DISABLE.
 336          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 337          // 返回: 执行结果 SUCCESS/FAIL.
 338          // 版本: V1.0, 2020-09-29
 339          //========================================================================
 340          u8 NVIC_PWM_Init(u8 Channel, u8 State, u8 Priority)
 341          {
 342   1        if(Channel > PWMB) return FAIL;
 343   1        if(Priority > Priority_3) return FAIL;
 344   1        EAXSFR();   /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
 345   1        switch(Channel)
 346   1        {
 347   2          case PWMA:
 348   2            PWMA_IER = State;
 349   2            PWMA_Priority(Priority);
 350   2          break;
 351   2      
 352   2          case PWMB:
 353   2            PWMB_IER = State;
 354   2            PWMB_Priority(Priority);
 355   2          break;
 356   2      
 357   2          default:
 358   2            PWMB_IER = State;
 359   2            Priority = NULL;
 360   2          break;
 361   2        }
 362   1        EAXRAM();   /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
 363   1        return SUCCESS;
 364   1      }
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      10/19/2021 09:02:20 PAGE 7   

 365          
 366          //========================================================================
 367          // 函数: NVIC_PCA_Init
 368          // 描述: PCA嵌套向量中断控制器初始化.
 369          // 参数: Channel:  通道, PCA0/PCA1/PCA2/PCA_Counter.
 370          // 参数: State:    中断使能状态, PCA_ECOM/PCA_CCAPP/PCA_CCAPN/PCA_MAT/PCA_TOG/PCA_PWM/PCA_ECCF/DISABLE.
 371          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 372          // 返回: 执行结果 SUCCESS/FAIL.
 373          // 版本: V1.0, 2020-09-29
 374          //========================================================================
 375          u8 NVIC_PCA_Init(u8 Channel, u8 State, u8 Priority)
 376          {
 377   1      //  if(Channel > PCA_Counter) return FAIL;
 378   1        if(Priority > Priority_3) return FAIL;
 379   1        PCA_Priority(Priority);
 380   1        switch(Channel)
 381   1        {
 382   2          case PCA0:
 383   2            CCAPM0 = State;
 384   2          break;
 385   2      
 386   2          case PCA1:
 387   2            CCAPM1 = State;
 388   2          break;
 389   2      
 390   2          case PCA2:
 391   2            CCAPM2 = State;
 392   2          break;
 393   2      
 394   2          case PCA_Counter:
 395   2            CMOD = (CMOD  & ~1) | (State & 1);
 396   2          break;
 397   2        }
 398   1        return SUCCESS;
 399   1      }
 400          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1551    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
