C51 COMPILER V9.60.0.0   PCA                                                               05/11/2022 10:47:53 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN .\list\PCA.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PCA.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\PCA.lst) 
                    -TABS(2) OBJECT(.\list\PCA.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          
  15          #include  "PCA.h"
  16          
  17          bit   B_Capture0,B_Capture1,B_Capture2;
  18          u8    PCA0_mode,PCA1_mode,PCA2_mode;
  19          u16   CCAP0_tmp,PCA_Timer0;
  20          u16   CCAP1_tmp,PCA_Timer1;
  21          u16   CCAP2_tmp,PCA_Timer2;
  22          
  23          /*************  功能说明  **************
  24          
  25          
  26          ******************************************/
  27          
  28          
  29          
  30          
  31          //========================================================================
  32          // 函数: UpdatePwm(u8 PCA_id, u8 pwm_value)
  33          // 描述: 更新PWM值. 
  34          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  35          //     pwm_value: pwm值, 这个值是输出低电平的时间.
  36          // 返回: none.
  37          // 版本: V1.0, 2012-11-22
  38          //========================================================================
  39          void  UpdatePwm(u8 PCA_id, u8 pwm_value)
  40          {
  41   1        if(PCA_id == PCA0)    CCAP0H = pwm_value;
  42   1        else if(PCA_id == PCA1) CCAP1H = pwm_value;
  43   1        else if(PCA_id == PCA2) CCAP2H = pwm_value;
  44   1      }
  45          
  46          //========================================================================
  47          // 函数: void PCA_Init(PCA_id, PCA_InitTypeDef *PCAx)
  48          // 描述: PCA初始化程序.
  49          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  50          //     PCAx: 结构参数,请参考PCA.h里的定义.
  51          // 返回: none.
  52          // 版本: V1.0, 2012-11-22
  53          //========================================================================
  54          void  PCA_Init(u8 PCA_id, PCA_InitTypeDef *PCAx)
C51 COMPILER V9.60.0.0   PCA                                                               05/11/2022 10:47:53 PAGE 2   

  55          {
  56   1        if(PCA_id > PCA_Counter)  return;   //id错误
  57   1      
  58   1        if(PCA_id == PCA_Counter)     //设置公用Counter
  59   1        {
  60   2          CR = 0;
  61   2          CH = 0;
  62   2          CL = 0;
  63   2          AUXR1 = (AUXR1 & ~(3<<4)) | PCAx->PCA_IoUse;      //切换IO口
  64   2          CMOD  = (CMOD  & ~(7<<1)) | PCAx->PCA_Clock;      //选择时钟源
  65   2          CMOD  = (CMOD  & ~1) | (PCAx->PCA_Interrupt_Mode & 1);  //ECF
  66   2          if(PCAx->PCA_Polity == PolityHigh)    PPCA = 1; //高优先级中断
  67   2          else                  PPCA = 0; //低优先级中断
  68   2          if(PCAx->PCA_RUN == ENABLE) CR = 1;
  69   2          return;
  70   2        }
  71   1      
  72   1        PCAx->PCA_Interrupt_Mode &= (3<<4) + 1;
  73   1        if(PCAx->PCA_Mode >= PCA_Mode_SoftTimer)  PCAx->PCA_Interrupt_Mode &= ~(3<<4);
  74   1      
  75   1        if(PCA_id == PCA0)
  76   1        {
  77   2          CCAPM0    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;  //工作模式, 中断模式
  78   2          PCA_PWM0  = (PCA_PWM0 & ~(3<<6)) | PCAx->PCA_PWM_Wide;  //PWM宽度
  79   2      
  80   2          PCA_Timer0 = PCAx->PCA_Value;
  81   2          B_Capture0 = 0;
  82   2          PCA0_mode = PCAx->PCA_Mode;
  83   2          CCAP0_tmp = PCA_Timer0;
  84   2          CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
  85   2          CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
  86   2        }
  87   1        if(PCA_id == PCA1)
  88   1        {
  89   2          CCAPM1    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
  90   2          PCA_PWM1  = (PCA_PWM1 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
  91   2      
  92   2          PCA_Timer1 = PCAx->PCA_Value;
  93   2          B_Capture1 = 0;
  94   2          PCA1_mode = PCAx->PCA_Mode;
  95   2          CCAP1_tmp = PCA_Timer1;
  96   2          CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
  97   2          CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
  98   2        }
  99   1        if(PCA_id == PCA2)
 100   1        {
 101   2          CCAPM2    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 102   2          PCA_PWM2  = (PCA_PWM2 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 103   2      
 104   2          PCA_Timer2 = PCAx->PCA_Value;
 105   2          B_Capture2 = 0;
 106   2          PCA2_mode = PCAx->PCA_Mode;
 107   2          CCAP2_tmp = PCA_Timer2;
 108   2          CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 109   2          CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 110   2        }
 111   1      }
 112          
 113          
 114          //========================================================================
 115          // 函数: void PCA_Handler (void) interrupt PCA_VECTOR
 116          // 描述: PCA中断处理程序.
C51 COMPILER V9.60.0.0   PCA                                                               05/11/2022 10:47:53 PAGE 3   

 117          // 参数: None
 118          // 返回: none.
 119          // 版本: V1.0, 2012-11-22
 120          //========================================================================
 121          void  PCA_Handler (void) interrupt PCA_VECTOR
 122          {
 123   1        if(CCF0)    //PCA模块0中断
 124   1        {
 125   2          CCF0 = 0;   //清PCA模块0中断标志
 126   2          if(PCA0_mode >= PCA_Mode_SoftTimer)   //PCA_Mode_SoftTimer and PCA_Mode_HighPulseOutput
 127   2          {
 128   3            CCAP0_tmp += PCA_Timer0;
 129   3            CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 130   3            CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 131   3          }
 132   2          else if(PCA0_mode == PCA_Mode_Capture)
 133   2          {
 134   3            CCAP0_tmp = CCAP0H; //读CCAP0H
 135   3            CCAP0_tmp = (CCAP0_tmp << 8) + CCAP0L;
 136   3            B_Capture0 = 1;
 137   3          }
 138   2        }
 139   1      
 140   1        if(CCF1)  //PCA模块1中断
 141   1        {
 142   2          CCF1 = 0;   //清PCA模块1中断标志
 143   2          if(PCA1_mode >= PCA_Mode_SoftTimer)   //PCA_Mode_SoftTimer and PCA_Mode_HighPulseOutput
 144   2          {
 145   3            CCAP1_tmp += PCA_Timer1;
 146   3            CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 147   3            CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 148   3          }
 149   2          else if(PCA1_mode == PCA_Mode_Capture)
 150   2          {
 151   3            CCAP1_tmp = CCAP1H; //读CCAP1H
 152   3            CCAP1_tmp = (CCAP1_tmp << 8) + CCAP1L;
 153   3            B_Capture1 = 1;
 154   3          }
 155   2        }
 156   1      
 157   1        if(CCF2)  //PCA模块2中断
 158   1        {
 159   2          CCF2 = 0;   //清PCA模块1中断标志
 160   2          if(PCA2_mode >= PCA_Mode_SoftTimer)   //PCA_Mode_SoftTimer and PCA_Mode_HighPulseOutput
 161   2          {
 162   3            CCAP2_tmp += PCA_Timer2;
 163   3            CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 164   3            CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 165   3          }
 166   2          else if(PCA2_mode == PCA_Mode_Capture)
 167   2          {
 168   3            CCAP2_tmp = CCAP2H; //读CCAP2H
 169   3            CCAP2_tmp = (CCAP2_tmp << 8) + CCAP2L;
 170   3            B_Capture2 = 1;
 171   3          }
 172   2        }
 173   1      
 174   1        if(CF)  //PCA溢出中断
 175   1        {
 176   2          CF = 0;     //清PCA溢出中断标志
 177   2        }
 178   1      
C51 COMPILER V9.60.0.0   PCA                                                               05/11/2022 10:47:53 PAGE 4   

 179   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    639    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
