C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2022 10:47:53 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\timer.l
                    -st) TABS(2) OBJECT(.\list\timer.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          
  15          /*************  功能说明  **************
  16          
  17          本文件为STC15xxx系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
  18          
  19          
  20          ******************************************/
  21          
  22          
  23          
  24          #include  "timer.h"
  25          
  26          bit B_Timer0_1ms;
  27          
  28          /********************* Timer0中断函数************************/
  29          void timer0_int (void) interrupt TIMER0_VECTOR
  30          {
  31   1        B_Timer0_1ms = 1; //产生1ms标志
  32   1      }
  33          
  34          /********************* Timer1中断函数************************/
  35          void timer1_int (void) interrupt TIMER1_VECTOR
  36          {
  37   1      
  38   1      }
  39          
  40          /********************* Timer2中断函数************************/
  41          void timer2_int (void) interrupt TIMER2_VECTOR
  42          {
  43   1        P10 = ~P10;
  44   1      }
  45          
  46          
  47          //========================================================================
  48          // 函数: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  49          // 描述: 定时器初始化程序.
  50          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  51          // 返回: 成功返回0, 空操作返回1,错误返回2.
  52          // 版本: V1.0, 2012-10-22
  53          //========================================================================
  54          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2022 10:47:53 PAGE 2   

  55          {
  56   1        if(TIM > Timer2)  return 1; //空操作
  57   1      
  58   1        if(TIM == Timer0)
  59   1        {
  60   2          TR0 = 0;    //停止计数
  61   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //允许中断
  62   2          else                  ET0 = 0;  //禁止中断
  63   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //高优先级中断
  64   2          else                  PT0 = 0;  //低优先级中断
  65   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //错误
  66   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
  67   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
  68   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
  69   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //对外计数或分频
  70   2          else                    TMOD &= ~0x04;  //定时
  71   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;  //输出时钟
  72   2          else              INT_CLKO &= ~0x01;  //不输出时钟
  73   2          
  74   2          TH0 = (u8)(TIMx->TIM_Value >> 8);
  75   2          TL0 = (u8)TIMx->TIM_Value;
  76   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //开始运行
  77   2          return  0;    //成功
  78   2        }
  79   1      
  80   1        if(TIM == Timer1)
  81   1        {
  82   2          TR1 = 0;    //停止计数
  83   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //允许中断
  84   2          else                  ET1 = 0;  //禁止中断
  85   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //高优先级中断
  86   2          else                  PT1 = 0;  //低优先级中断
  87   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
  88   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
  89   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
  90   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
  91   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //对外计数或分频
  92   2          else                    TMOD &= ~0x40;  //定时
  93   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;  //输出时钟
  94   2          else              INT_CLKO &= ~0x02;  //不输出时钟
  95   2          
  96   2          TH1 = (u8)(TIMx->TIM_Value >> 8);
  97   2          TL1 = (u8)TIMx->TIM_Value;
  98   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //开始运行
  99   2          return  0;    //成功
 100   2        }
 101   1      
 102   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 103   1        {
 104   2          AUXR &= ~(1<<4);  //停止计数
 105   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //允许中断
 106   2          else                    IE2  &= ~(1<<2);  //禁止中断
 107   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 108   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
 109   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
 110   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //对外计数或分频
 111   2          else                    AUXR &= ~(1<<3);  //定时
 112   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;  //输出时钟
 113   2          else              INT_CLKO &= ~0x04;  //不输出时钟
 114   2      
 115   2          TH2 = (u8)(TIMx->TIM_Value >> 8);
C51 COMPILER V9.60.0.0   TIMER                                                             05/11/2022 10:47:53 PAGE 3   

 116   2          TL2 = (u8)TIMx->TIM_Value;
 117   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //开始运行
 118   2          return  0;    //成功
 119   2        }
 120   1        return 2; //错误
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    465    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
