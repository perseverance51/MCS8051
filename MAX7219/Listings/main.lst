C51 COMPILER V9.60.0.0   MAIN                                                              12/16/2021 17:21:41 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #include <string.h>
   4          #include<DS1302.h> 
   5          
   6          typedef unsigned char u8;
   7          typedef unsigned int u16;
   8          
   9          sbit DIN = P2^0;     //数据串出引脚
  10          sbit CS = P2^1;     //片选端
  11          sbit CLK = P2^2;    //移位时钟端
  12          /***外部中断和定时T0中断标志位****/
  13          u8 volatile State = 1;
  14          u8 volatile flags = 1; //1秒定时标志
  15          
  16          unsigned char Date_buff[3] = {0, 0,0};//数码管显示缓冲区，初值0xFF确保启动时都不亮
  17          unsigned char Time_buff[3] = {0,0,0};  
  18          //显示的数字，数值为10的时候，显示“-”
  19          
  20          /****定时器T0初始化*****/
  21          void TimeInit()
  22          {
  23   1          EA = 1;                       //打开中断总开关
  24   1          EX0=1; //开外部中断0      
  25   1          IT0=1; //外部中断0边沿触发     
  26   1          ET0 = 1;                      //打开T0中断开关
  27   1          TMOD = 0x01;    //设置定时器工作在模式1
  28   1          TH0=(65536-5000)/256;  //高四位寄存器的值；//5000us=5ms
  29   1          TL0=(65536-5000)%256;  //低四位寄存器的值；
  30   1          TR0 = 1;               //允许定时器T0工作
  31   1      }
  32          void UpDate();
  33          void  DisTime();
  34          void DisDate();
  35          void delayms(unsigned int x)
  36          {
  37   1          unsigned char i;
  38   1          while(x--)
  39   1          {
  40   2              for(i = 0; i < 120; i++);
  41   2          }
  42   1      }
  43          //写数据函数
  44          void write_data(unsigned char addr,unsigned char dat)
  45          {
  46   1          unsigned char i;
  47   1          CS = 0;        // 先写地址，片选置低，串行数据加载到移位寄存器
  48   1          for(i = 0; i < 8; i++) //
  49   1          {
  50   2              CLK = 0;     //时钟上升沿数据移入内部移位寄存器
  51   2              addr <<= 1;    //待发送的地址，每次左移一次，高位在前发送，
  52   2              DIN = CY;    //数据移位后，如果有溢出，则可以从进位位CY中获得溢出的数据位
  53   2              CLK = 1;
  54   2              _nop_();
C51 COMPILER V9.60.0.0   MAIN                                                              12/16/2021 17:21:41 PAGE 2   

  55   2              _nop_();
  56   2              CLK = 0;    //下降沿时数据从DOUT移出
  57   2          }
  58   1          for(i = 0; i < 8; i++)
  59   1          {
  60   2              CLK = 0;   //
  61   2              dat <<= 1;   //发送数据
  62   2              DIN = CY;
  63   2              CLK = 1;
  64   2              _nop_();
  65   2              _nop_();
  66   2              CLK = 0;
  67   2          }
  68   1          CS = 1;      //CS上升沿，数据锁存
  69   1      }
  70          //初始化函数
  71          void init_max7221(void)
  72          {
  73   1          write_data(0x09,0xff);    //编码模式
  74   1          write_data(0x0a,0x07);    //亮度控制
  75   1          write_data(0x0b,0x07);    //扫描数码管的位数
  76   1          write_data(0x0c,0x01);     //工作模式
  77   1      }
  78          void main(void)
  79          {   
  80   1      
  81   1          unsigned char i;
  82   1         TimeInit();                   //定时器中断初始化
  83   1        //  Init_DS1302();//将1302初始化,Proteus仿真时需要将初始注释掉，否则时间不会读取系统时间。
  84   1          init_max7221();    // 初始化
  85   1          delayms(2);
  86   1          for(i = 0; i < 8; i++)
  87   1          {
  88   2              write_data(i+1,10);   // 显示-位
  89   2          }
  90   1           delayms(1000);
  91   1          while(1){
  92   2            if(flags == 1)            //判断1秒定时标志
  93   2              {
  94   3                UpDate();
  95   3                 flags = 0;            //标志位清零
  96   3              }
  97   2          if(State)
  98   2          DisTime();
  99   2          else DisDate();
 100   2        }         
 101   1      }
 102          void UpDate(){
 103   1      //unsigned char second,minute,hour,day,month,year;      //分别储存苗、分、小时，日，月，年
 104   1          unsigned char ReadValue;   //储存从1302读取的数据
 105   1           memset(Time_buff, 0, sizeof(Time_buff));
 106   1            ReadValue = ReadSet1302(0x81);   //从秒寄存器读数据
 107   1        Time_buff[0]=((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F);//将读出数据转化
 108   1      
 109   1            ReadValue = ReadSet1302(0x83);  //从分寄存器读
 110   1        Time_buff[1]=((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F); //将读出数据转化
 111   1        
 112   1          ReadValue = ReadSet1302(0x85);  //从时寄存器读
 113   1        Time_buff[2]=((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F); //将读出数据转化
 114   1        
 115   1              ReadValue = ReadSet1302(0x87);   //从日寄存器读数据
 116   1          Date_buff[2]=((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F); //将读出数据转化
C51 COMPILER V9.60.0.0   MAIN                                                              12/16/2021 17:21:41 PAGE 3   

 117   1        
 118   1            ReadValue = ReadSet1302(0x89);  //从月寄存器读
 119   1          Date_buff[1]=((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F); //将读出数据转化
 120   1        
 121   1          ReadValue = ReadSet1302(0x8d);  //从年寄存器读
 122   1              Date_buff[0]=((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F); //将读出数据转化
 123   1      }
 124          void  DisTime(){
 125   1      
 126   1            write_data(1,Time_buff[2]/10);   // 显示时高位
 127   1            write_data(2,Time_buff[2]%10);    // 显示时低位
 128   1           write_data(3,10);    // 显示-位
 129   1              write_data(4,Time_buff[1]/10);   // 显示时高位
 130   1            write_data(5,Time_buff[1]%10);    // 显示时低位
 131   1            write_data(6,10);    // 显示-
 132   1            write_data(7,Time_buff[0]/10);   // 显示时高位
 133   1            write_data(8,Time_buff[0]%10);    // 显示时低位
 134   1      }
 135          
 136          void DisDate(){
 137   1              write_data(1,Date_buff[0]/10);   // 显示年高位
 138   1            write_data(2,Date_buff[0]%10);    // 显示年低位
 139   1           write_data(3,10);    // 显示-位
 140   1              write_data(4,Date_buff[1]/10);   // 显示月高位
 141   1            write_data(5,Date_buff[1]%10);    // 显示月低位
 142   1            write_data(6,10);    // 显示-
 143   1            write_data(7,Date_buff[2]/10);   // 显示日高位
 144   1            write_data(8,Date_buff[2]%10);    // 显示日低位
 145   1        
 146   1      }
 147          /****中断服务函数*****/
 148          void InterruptTimer0() interrupt 1
 149          {
 150   1         static volatile u8 cnt = 0;  //用来记录中断次数，设置的中断定时为1ms，中断200次即一秒钟
 151   1      
 152   1          TH0=(65536-5000)/256;  //高四位寄存器的值；//5000us=5ms
 153   1          TL0=(65536-5000)%256;  //低四位寄存器的值；
 154   1          cnt++;                                     //中断次数计数值加1
 155   1          if(cnt>=200)                                 //中断次数达到200次即为1秒
 156   1          {
 157   2              cnt = 0;                               //清零，重新记录中断次数
 158   2              flags = 1;                             //设置1秒定时标志位1
 159   2          }
 160   1        }
 161          /****中断服务函数*****/
 162          void interint0() interrupt 0   
 163          {   //外部中断0处理    
 164   1          State = !State;
 165   1      } 
 166              


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    596    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
